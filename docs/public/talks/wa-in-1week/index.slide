# 编程语言的构成

一周学会凹语言

柴树杉
31 Jan 2025
https://wa-lang.org

## 常量(const)

- 数值
  - 整数：-1, 0, 100
  - 实数 (浮点数)：1.2, 2.3e-6, -1.2e3
  - 复数：2+5i, 1.2i
- 布尔
  - true, false
- 文本 (字符串)
  - "Hello", "你好", "123", "-1.2e3", "true"

## 运算(operator)

- 数值运算 (整数/浮点数/复数)：+ - * / %
  - 1 + 2, 10 % 3, 32.5 / 3
- 文本运算 (字符串)：+(连接)
  - "-1" + "23"
- 比较运算 (数值/文本)：> >= < <= == !=
  - 数值比较 (值大小)：1 > 2, 32 >= 0, 100 != 1e2
  - 文本比较 (字典顺序)："Hello" > "-123"
- 布尔运算 (布尔)：|| && !
  - false || true, 32 >= 0 && !false
- 位运算 (整数)：| & ^(异或/取反)
  - 3 | 51, ^32, `32 ^ 0`

## 函数(func)

- `main` 是入口函数，其他函数 `sin(-1.2)`, `pow(2, 3)`
- 运算即函数
  - 1 + 2 等价于 add(1, 2)
  - 32 >= 0 等价于 greatThan(32, 0)
  - !false 等价于 not(false)
  - true && false 等价于 and(true, false)
- 运算优先级
  - 32 >= 0 && !false 等价于 `and(greatThan(32, 0), not(false))`
- 不同语言运算有细微差异
  - 求余运算：大部分语言有求余运算 10%3，少量语言用 `mod(10, 3)`
  - 指数运算：有些语言用 `2 ** 3` 或 `2 ^ 3`，大部分语言用 `pow(2, 3)`

## 包 (package)

- 可以简单看作函数集合

```
import "math"

func main {
	println(math.Sin(math.Pi/3))
}
```

## 变量

- 常量：不可修改的值 `const x = 123`
- 全局变量：可以修改的值 `global x = 123`
- 局部变量：可以修改的值 `x := 123`
  - `x := 123` (第一次定义并设置局部变量的值)
- `x = 10` (后续再改)
- `x += 10` (边算边改)
  - 即 `x = x + 10`
- 语言差异
  - 有些语言第一次和后续修改都用 `=`
  - 变量和数学中的未知数 (值未知但不可修改) 并不是一个概念(数学中并不存在变量)

## 流程控制(control)

- 条件 (if/else, switch/case)
  - `if cond { ... }`
  - `if cond { ... } else { ... }`
  - `switch expr { case v1: ...; case v2: ...; default: ... }`
- 循环 (for)
  - 条件循环 `for cond { ... }`，死循环 `for { ... }`
  - 结束循环 (break)
- 语言差异
  - 大部分语言条件需要加 ()，例如: `if (cond) { ... }`
  - 循环不同语言差异较大，有些语言是 until cond { ... }，和while 条件相反
    - 等价于：`while !cond { ... }`

## 求 1+2+...+100

```
func main {
	sum := 0
	for i := 0; i <= 100; i += 1 {
		sum += i
	}
	println(sum)
}
```

## 自定义函数(UDF)

```
func main {
	println(gauss(100))
}

func gauss(n: int) => int {
	sum := 0
	for i := 0; i <= n; i += 1 {
		sum += i
	}
	return sum
}
```

## 类型(type)

- 数值
  - 整数：int, uint
  - 实数 (浮点数)：float32, float64，缩写为 f32, f64
  - 复数：complex64, complex128
- 布尔
  - bool
- 文本 (字符串)
  - string

## 闭包(closure)

- 闭包：没有名字 (且省略类型) 的函数
- 无参数闭包 `func { ... }`
- 单参数闭包 `func(x: int) { ... }`
- 多参数闭包 `func(x, y, z: int) => int { ... }`

## 数据结构：列表与字典

- 列表 `[]V`
  - 整数 `[]int{1, 3, 5}`, 字符串 `[]string{"Hello", "123", "abc"}`
  - 列表操作
    - 取值/子列表：`a[i]`, `a[i:j]`, `a[i:]`, `a[:j]`
    - 添加值：`a = append(a, v)`
- 字典 `map[K]V`, 在有的语言中叫动态数组
  - `map[string]int{"Mon":1, "Tue":2, "Sat":6}`
  - 字典操作
    - 取值：`v = a[k]` 或 `v, ok := a[k]`
    - 添加值：`a[k] = v`
    - 删除值：`delete(a, k)`

## 对象和方法

```
type Rect struct {
	Width, Height: f64
}

func Rect.Area() => f64 {
	return this.Width * this.Height
}

func main {
	rect := Rect{20, 30}
	println(rect.Area())
}
```

## 凹语言编程哲学

- 简单易用、中英文编程友好
- 少儿编程启蒙、小游戏开发友好
- 静态类型、编译型通用语言
- 多操作系统、多硬件平台支持

## 参考链接

- [https://wa-lang.org](https://wa-lang.org)
- [https://wa-lang.org/playground](https://wa-lang.org/playground)
- [https://gitcode.com/wa-lang/wa](https://gitcode.com/wa-lang/wa)
- [https://github.com/wa-lang/wa](https://github.com/wa-lang/wa)
- [http://open.qiniu.us/composition-of-programming-languages.pdf](http://open.qiniu.us/composition-of-programming-languages.pdf) (基于该模板, 感谢)
