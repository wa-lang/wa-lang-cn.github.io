import{_ as s}from"./chunks/st0018-01.d80ea6a2.js";import{_ as n,c as a,o as l,a as p}from"./app.7586e3b1.js";const d=JSON.parse('{"title":"凹语言版贪吃蛇","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块分解","slug":"模块分解","link":"#模块分解","children":[]},{"level":2,"title":"canvas包","slug":"canvas包","link":"#canvas包","children":[]},{"level":2,"title":"游戏主逻辑","slug":"游戏主逻辑","link":"#游戏主逻辑","children":[]},{"level":2,"title":"页面环境","slug":"页面环境","link":"#页面环境","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"smalltalk/st0018.md"}'),o={name:"smalltalk/st0018.md"},e=p('<h1 id="凹语言版贪吃蛇" tabindex="-1">凹语言版贪吃蛇 <a class="header-anchor" href="#凹语言版贪吃蛇" aria-hidden="true">#</a></h1><ul><li>时间：2023-01-03</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0018.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0018.html</a></li></ul><hr><p>贪吃蛇作为一个诞生于1976年的游戏，虽然逻辑非常简单，但使用凹语言实现它可以展示凹语言的包管理、与宿主JS环境交互、操作图形界面等能力。贪吃蛇游戏网页地址：<a href="https://wa-lang.org/wa/snake" target="_blank" rel="noreferrer">https://wa-lang.org/wa/snake</a>。运行结果如图： <img src="'+s+`" alt=""></p><ul><li>安装凹语言版本：<code>go install wa-lang.org/wa@v0.4.1</code></li></ul><h2 id="模块分解" tabindex="-1">模块分解 <a class="header-anchor" href="#模块分解" aria-hidden="true">#</a></h2><p>凹语言实现的贪吃蛇主要由以下三个模块组成：</p><ul><li>canvas包，用凹语言编写，负责在凹语言侧管理画布对象，以及处理画布对象的交互操作；</li><li>贪吃蛇主逻辑，用凹语言编写；</li><li>页面环境，负责画布对象在JS侧的具体实现、JS方法向凹语言侧的导入，以及网页布局和消息循环。</li></ul><p>代码：<a href="https://gitee.com/wa-lang/wa/tree/master/_examples/snake" target="_blank" rel="noreferrer">https://gitee.com/wa-lang/wa/tree/master/_examples/snake</a></p><h2 id="canvas包" tabindex="-1">canvas包 <a class="header-anchor" href="#canvas包" aria-hidden="true">#</a></h2><p>canvas包是凹语言侧操作页面画布对象的接口。画布对象<code>Canvas</code>定义如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#画布对象</span></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> Canvas </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    device_id: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">画布对象对应的网页DOM对象id</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    width:     </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">画布宽度，以像素为单位</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    height:    </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">画布高度，以像素为单位</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    frame_buf: []</span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">画布帧缓存，容量为Width </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> Height</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>Canvas</code>对应于网页中的画布DOM对象，页面中的一块可逐像素操作的矩形区域。由于一个应用可能创建多个画布，因此<code>Canvas</code>对象中有一个<code>device_id</code>属性用于区别不同的画布。除宽度<code>width</code>、高度<code>height</code>属性外，<code>Canvas</code>最重要的属性是它的帧缓存<code>frame_buf</code>，<code>frame_buf</code>是一个动态数组，其中按行主序保存着画布每个像素的颜色值（颜色值为8位RGBA格式，每个像素占用4字节，即1个32位无符号整型数u32）。</p><p><code>NewCanvas</code>函数用于创建并初始化一个<code>Canvas</code>对象：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#wa:import wa_js_env newCanvas</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">newCanvas_JS</span><span style="color:#D8DEE9FF;">(w, h: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">u32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#创建一个宽度为w像素、高度为h像素的画布对象</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> NewCanvas(w, h: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">Canvas {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> canvas Canvas</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas.device_id </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">newCanvas_JS</span><span style="color:#D8DEE9FF;">(w, h)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas.width </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> w</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas.height </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> h</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas.frame_buf </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">make</span><span style="color:#D8DEE9FF;">([]</span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">, w </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> h)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;">canvas</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>由于Wasm不能直接操作网页中的DOM对象，因此<code>NewCanvas</code>函数需要调用由JS宿主环境导入的<code>newCanvas_JS</code>函数方可完成画布DOM对象的创建。编译标签<code>#wa:import wa_js_env newCanvas</code>标明了后续的<code>newCanvas_JS</code>是由外部导入的以及对应的导入路径，因此它只定义了原型而没有函数体。画布DOM对象创建后，代码<code>make([]u32, w * h)</code>创建了对应宽高的帧缓存，并执行了其他一些初始化操作。</p><p>凹语言侧代码可通过<code>Canvas</code>对象的下列方法读写画布帧缓存：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#获取画布对象坐标为(x, y)处的像素颜色值</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Canvas.GetPixel(x, y: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.frame_buf[y </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.width </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> x]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#设置画布对象坐标(x, y)处的颜色值为color</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Canvas.SetPixel(x, y, color: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.frame_buf[y </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.width </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> x] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> color</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>当整个帧缓存填充完毕后，通过<code>Canvas.Flush</code>方法将帧缓存数据更新至页面中的画布对象；与创建画布DOM对象类似，该操作也需要通过JS环境导入的函数完成：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#wa:import wa_js_env updateCanvas</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">updateCanvas_JS</span><span style="color:#D8DEE9FF;">(id: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">, buf: </span><span style="color:#81A1C1;">*u32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Canvas.Flush() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">updateCanvas_JS</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.device_id, </span><span style="color:#81A1C1;">&amp;this</span><span style="color:#D8DEE9FF;">.frame_buf[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">])</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>除了<code>Canvas</code>对象外，canvas包还需要处理页面画布DOM对象上的交互事件（如键盘按键、鼠标点击等），否则用户无法操作贪吃蛇走向希望的方向。与此相关的<code>CanvasEvents</code>对象定义如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#画布事件回调函数原型</span></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> OnTouch </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> (x, y: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> OnKey </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;">(key: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#画布事件</span></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> CanvasEvents </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	Device_id:   </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">     </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">画布设备ID</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    OnMouseDown: OnTouch </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">鼠标按下时的回调处理函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    OnMouseUp:   OnTouch </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">鼠标松开时的回调处理函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	OnKeyDown:   OnKey   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">键盘按下时的回调处理函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	OnKeyUp:     OnKey   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;">键盘弹起时的回调处理函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> canvas_events: []CanvasEvents</span></span>
<span class="line"></span></code></pre></div><p>一个<code>CanvasEvents</code>对应某个<code>Canvas</code>的一组交互事件回调函数，其对应关系由<code>CanvasEvents.Device_id</code>和<code>Canvas.device_id</code>确定。canvas包的包级变量<code>canvas_events</code>是一个动态数组，凹语言侧代码可以通过<code>AttachCanvasEvents</code>函数将一个事件对象附加到事件对象数组中：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> AttachCanvasEvents(e: CanvasEvents) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> canvas_events {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> canvas_events[i].Device_id </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> e.Device_id {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			canvas_events[i] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> e</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas_events </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">append</span><span style="color:#D8DEE9FF;">(canvas_events, e)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>当某个画布DOM对象上产生鼠标点击事件时，即可通过遍历<code>canvas_events</code>数组，调用与该画布关联的鼠标点击回调函数：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">/*</span></span>
<span class="line"><span style="color:#D8DEE9FF;">供外部JS调用的鼠标按下事件响应函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">id为画布DOM对象对应的Canvas对象id</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(x, y)为画布像素坐标系坐标</span></span>
<span class="line"><span style="color:#81A1C1;">*/</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> OnMouseDown(id: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">, x, y:</span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> _, i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> canvas_events {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i.Device_id </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> id {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			i.OnMouseDown(x, y)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="游戏主逻辑" tabindex="-1">游戏主逻辑 <a class="header-anchor" href="#游戏主逻辑" aria-hidden="true">#</a></h2><p>游戏主逻辑由<code>GameState</code>对象的全局实例<code>gameState</code>实现，它的定义如下</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> GameState </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	w, h  :</span><span style="color:#81A1C1;">i32</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	scale :</span><span style="color:#81A1C1;">i32</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	grid  :[]</span><span style="color:#81A1C1;">i8</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	body  :[]Position</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	dir   :</span><span style="color:#81A1C1;">i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	ca :</span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">canvas.Canvas</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> gameState: GameState</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> GameState.Init(w, h: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">, scale: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.w </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> w</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.h </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> h</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.scale </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> scale</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.grid </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">make</span><span style="color:#D8DEE9FF;">([]</span><span style="color:#81A1C1;">i8</span><span style="color:#D8DEE9FF;">, </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">(w</span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">h))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.ca </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> canvas.NewCanvas(</span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">(w</span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">scale), </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">(h</span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">scale))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> caev: canvas.CanvasEvents</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	caev.Device_id </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.ca.GetDeviceID()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	caev.OnMouseDown </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;">(x, y: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) {}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	caev.OnMouseUp </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;">(x, y: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) {}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	caev.OnKeyUp </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;">(key: </span><span style="color:#81A1C1;">u32</span><span style="color:#D8DEE9FF;">) {}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	caev.OnKeyDown </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.OnKeyDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	Dirs[DirNull] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Position{x: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">, y: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	Dirs[DirLeft] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Position{x: </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, y: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	Dirs[DirUp] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Position{x: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">, y: </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	Dirs[DirRight] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Position{x: </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, y: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	Dirs[DirDown] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Position{x: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">, y: </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	canvas.AttachCanvasEvents(caev)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>GameState</code>的<code>ca</code>属性类型为<code>Canvas</code>，用于输出图形结果；<code>grid</code>是以行主序保存的棋盘格状态；<code>body</code>动态数组记录了贪吃蛇身体的每个节点的棋盘格坐标。由于1个像素在屏幕上非常小难以看清，因此1个棋盘格实际对应画布上一个10像素*10像素的正方形区域。<code>GameState.Init</code>方法除了初始化上述属性，还通过<code>canvas.AttachCanvasEvents</code>方法挂接了相应的交互事件回调函数，特别需要注意的是，该处挂接的<code>OnKeyDown</code>事件是一个对象方法，它本质上是一个闭包。</p><p>游戏的处理流程很简单：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> GameState.Step() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.dir </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> DirNull {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	newHead </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body[</span><span style="color:#88C0D0;">len</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body)</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	newHead.x </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> Dirs[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.dir].x</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	newHead.y </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> Dirs[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.dir].y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> newHead.x </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		newHead.x </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.w </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	} </span><span style="color:#81A1C1;">else</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> newHead.x </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.w {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		newHead.x </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> newHead.y </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		newHead.y </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.h </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	} </span><span style="color:#81A1C1;">else</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> newHead.y </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.h {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		newHead.y </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">switch</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.grid[newHead.y</span><span style="color:#81A1C1;">*this</span><span style="color:#D8DEE9FF;">.w</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;">newHead.x] {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> GridBody:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.Start()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> GridFood:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.SetGridType(newHead, GridBody)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">append</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body, newHead)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.GenFood()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">default</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.SetGridType(newHead, GridBody)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.SetGridType(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">], GridNull)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">append</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body, newHead)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.body[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">:]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.ca.Flush()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Step() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	gameState.Step()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">main</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	gameState.Init(</span><span style="color:#B48EAD;">32</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">32</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	gameState.Start()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>既按行进方向移动贪吃蛇的身体，并判断是否吃到自己或食物。<code>Step</code>函数导出到外部JS环境，是消息循环入口。</p><h2 id="页面环境" tabindex="-1">页面环境 <a class="header-anchor" href="#页面环境" aria-hidden="true">#</a></h2><p>页面环境的主要运行逻辑位于wa_app.js中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">class</span><span style="color:#D8DEE9FF;"> </span><span style="color:#8FBCBB;">WaApp</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">//..</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">init</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">app</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">importsObject</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">wa_js_env</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">new</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">function</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">newCanvas</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">w</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">h</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">canvas</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createElement</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">canvas</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">			</span><span style="color:#616E88;">//...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">          </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">updateCanvas</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">id</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">block</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">data</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">img</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_ctx</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createImageData</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_canvas</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">width</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_canvas</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">height</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">buf_len</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_canvas</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">width</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_canvas</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">height</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">4</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">buf</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">app</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">memUint8Array</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">buf_len</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">buf_len</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">              </span><span style="color:#D8DEE9;">img</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">buf</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_ctx</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">putImageData</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">img</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">          </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#D8DEE9;">WebAssembly</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">instantiateStreaming</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">importsObject</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">res</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_inst</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">res</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">instance</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_inst</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">exports</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">_start</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">mem</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_inst</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">exports</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">memory</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">memView</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">len</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">new</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">DataView</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_inst</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">exports</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">memory</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">buffer</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">len</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">memUint8Array</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">len</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">new</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">Uint8Array</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">mem</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">buffer</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">len</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">	</span><span style="color:#616E88;">//..</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">function</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">gameLoop</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">window</span><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">waApp</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_inst</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">exports</span><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">snake.Step</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#D8DEE9;">window</span><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">waApp</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">new</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">WaApp</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#D8DEE9;">window</span><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">waApp</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">init</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">./snake.wasm</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">timer</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">setInterval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">gameLoop</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">IS_MOBILE</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">?</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">150</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">:</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">100</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span></span>
<span class="line"></span></code></pre></div><p>它使用<code>WebAssembly.instantiateStreaming</code>方法创建了贪吃蛇的Wasm实例，并通过导入对象将<code>newCanvas</code>/<code>updateCanvas</code>等方法注入实例供凹语言侧调用；并周期性的调用导出的<code>snake.Step</code>方法驱动游戏进程。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><p>贪吃蛇例子较为完整的展示了如何使用凹语言开发网页应用。其中使用了动态数组、方法值闭包、自定义对象等特性，演示了凹语言与JS环境如何互相调用及传递数据。该例子体现了凹语言用于更复杂应用的开发潜力！</p>`,39),c=[e];function t(E,r,D,F,y,i){return l(),a("div",null,c)}const h=n(o,[["render",t]]);export{d as __pageData,h as default};
