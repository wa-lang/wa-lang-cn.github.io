import{_ as s,a,b as n,c as l}from"./chunks/st0015-04.4aea5135.js";import{_ as p,c as o,o as e,a as t}from"./app.7586e3b1.js";const c="/st0015-05.jpg",r="/st0015-06.jpg",g=JSON.parse('{"title":"凹语言点亮 Arduino Nano 33","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Arduino-wasm 是什么","slug":"_1-arduino-wasm-是什么","link":"#_1-arduino-wasm-是什么","children":[]},{"level":2,"title":"2. Arduino Nano 33 开发板介绍","slug":"_2-arduino-nano-33-开发板介绍","link":"#_2-arduino-nano-33-开发板介绍","children":[]},{"level":2,"title":"3. 编写 Arduino 的闪灯例子","slug":"_3-编写-arduino-的闪灯例子","link":"#_3-编写-arduino-的闪灯例子","children":[]},{"level":2,"title":"4. syscall/arduino 包介绍","slug":"_4-syscall-arduino-包介绍","link":"#_4-syscall-arduino-包介绍","children":[]},{"level":2,"title":"5. 编译到 Arduino-wasm 平台","slug":"_5-编译到-arduino-wasm-平台","link":"#_5-编译到-arduino-wasm-平台","children":[]},{"level":2,"title":"6. Arduino 平台胶水代码初探","slug":"_6-arduino-平台胶水代码初探","link":"#_6-arduino-平台胶水代码初探","children":[]},{"level":2,"title":"7. Arduino 构建 & 执行","slug":"_7-arduino-构建-执行","link":"#_7-arduino-构建-执行","children":[]},{"level":2,"title":"8. 本地模拟执行","slug":"_8-本地模拟执行","link":"#_8-本地模拟执行","children":[]},{"level":2,"title":"9. 总结展望","slug":"_9-总结展望","link":"#_9-总结展望","children":[]}],"relativePath":"smalltalk/st0015.md"}'),E={name:"smalltalk/st0015.md"},i=t('<h1 id="凹语言点亮-arduino-nano-33" tabindex="-1">凹语言点亮 Arduino Nano 33 <a class="header-anchor" href="#凹语言点亮-arduino-nano-33" aria-hidden="true">#</a></h1><ul><li>时间：2022-12-02</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0015.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0015.html</a></li></ul><p>凹语言是国内 Gopher 发起的纯社区构建的开源国产编程语言项目（没有公司背景、没有任何赞助）。同时凹语言也是国内第一个实现纯浏览器内编译、执行全链路的自研静态类型的编译型通用编程语言。凹语言不仅仅可以运行在浏览器和各大主流操作系统上，最近凹语言增加了对 Arduino-wasm 平台的支持，从而实现了用凹语言开发 Arduino 应用的目标。</p><ul><li>例子代码：<a href="https://gitee.com/wa-lang/wa/tree/master/_examples/arduino" target="_blank" rel="noreferrer">https://gitee.com/wa-lang/wa/tree/master/_examples/arduino</a></li><li>安装凹语言版本：<code>go install wa-lang.org/wa@v0.4.0-arduino</code></li></ul><h2 id="_1-arduino-wasm-是什么" tabindex="-1">1. Arduino-wasm 是什么 <a class="header-anchor" href="#_1-arduino-wasm-是什么" aria-hidden="true">#</a></h2><p>Wasm3 是一个高性能的 WebAssembly 解释器，而 Arduino-wasm 则是 Wasm3 针对 Arduino 的定制版本。Wasm3 最小的硬件依赖是 ~64Kb Flash 和 ~10Kb RAM。</p><p>Github 仓库：<a href="https://github.com/wasm3/wasm3-arduino" target="_blank" rel="noreferrer">https://github.com/wasm3/wasm3-arduino</a></p><p>下面是 Wasm3 运行在 iOS 的截图：</p><p><img src="'+s+'" alt=""></p><p>Arduino-wasm 则是运行在 Arduino Nano 33 等开发板上的 Wasm3。</p><h2 id="_2-arduino-nano-33-开发板介绍" tabindex="-1">2. Arduino Nano 33 开发板介绍 <a class="header-anchor" href="#_2-arduino-nano-33-开发板介绍" aria-hidden="true">#</a></h2><p>Arduino Nano 33，是 Arduino Nano 的高配版本，是一款基于 nRF52840 SoC ARM 32 位处理器的微型开发板。其中 Arduino Nano BLE Sense 其主控芯片集成了蓝牙低功耗（BLE）。NANO 33 BLE 不仅保留了与经典款 NANO 同样的尺寸与管脚，且在此基础上配有多种高性能传感器等，当然最重要的是满足了 Arduino-wasm 的最低硬件要求。</p><p><img src="'+a+`" alt=""></p><p>目前（2022年底），淘宝的价格大约在200元以上。</p><h2 id="_3-编写-arduino-的闪灯例子" tabindex="-1">3. 编写 Arduino 的闪灯例子 <a class="header-anchor" href="#_3-编写-arduino-的闪灯例子" aria-hidden="true">#</a></h2><p>代码逻辑比较简单，只是换成了凹语言来写：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;"># 版权 @2022 凹语言 作者。保留所有权利。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;syscall/arduino&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> LED </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> arduino.GetPinLED()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">init</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(LED, </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Print(</span><span style="color:#A3BE8C;">&quot;凹语言(Wa)/Arduino is running ...</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">main</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		arduino.DigitalWrite(LED, arduino.HIGH)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		arduino.Delay(</span><span style="color:#B48EAD;">100</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		arduino.DigitalWrite(LED, arduino.LOW)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		arduino.Delay(</span><span style="color:#B48EAD;">900</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们直接使用了 <code>syscall/arduino</code> 包来使用 Arduino 的功能。</p><h2 id="_4-syscall-arduino-包介绍" tabindex="-1">4. <code>syscall/arduino</code> 包介绍 <a class="header-anchor" href="#_4-syscall-arduino-包介绍" aria-hidden="true">#</a></h2><p>让我们看看 <a href="https://gitee.com/wa-lang/wa/blob/master/internal/waroot/_waroot/src/syscall/arduino" target="_blank" rel="noreferrer"><code>syscall/arduino</code> 包的代码</a>：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;"># 版权 @2022 凹语言 作者。保留所有权利。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> (</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	LOW  :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	HIGH :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	INPUT        :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	OUTPUT       :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	INPUT_PULLUP :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino millis</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Millis() </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino delay</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Delay(ms: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino pinMode</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> PinMode(pin, mode: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino digitalWrite</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> DigitalWrite(pin, value: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino getPinLED</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> GetPinLED() </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">#wa:import arduino print</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> PrintRawString(ptr: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">, len: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Print(s: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">print</span><span style="color:#D8DEE9FF;">(s)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Println(s: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(s)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>主要是将常用的函数通过 WASM 方式导入到了代码空间，大部分函数并不在凹语言中实现。</p><h2 id="_5-编译到-arduino-wasm-平台" tabindex="-1">5. 编译到 Arduino-wasm 平台 <a class="header-anchor" href="#_5-编译到-arduino-wasm-平台" aria-hidden="true">#</a></h2><p>在编译时需要通过 <code>-target=arduino</code> 参数指定目标类型：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa build -target=arduino app.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">$ wat2wasm a.out.wat -o app.wasm</span></span>
<span class="line"><span style="color:#d8dee9ff;">$ xxd -i app.wasm &gt; app.wasm.h</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>第一个命令是编译为文本格式的 WASM 文件 <code>a.out.wat</code>，然后通过 <code>wat2wasm</code> 命令编译得到二进制格式的 WASM 文件，最后通过 <code>xxd</code> 将二进制的 WASM 文件转换为 C 语言的头文件。</p><p><code>app.wasm.h</code> 文件内容如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">unsigned</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">char</span><span style="color:#D8DEE9FF;"> app_wasm</span><span style="color:#81A1C1;">[]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">61</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">73</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">6d</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">01</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">01</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">2a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">08</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">60</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">01</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">7f</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">60</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">02</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">7f</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">7f</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">60</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">00</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">01</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">7f</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">6e</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">67</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">2e</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">6f</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">72</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">67</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">0a</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">unsigned</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> app_wasm_len </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1543</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>然后 Arduino 工程就可以通过 <code>#include &quot;app.wasm.h&quot;</code> 方式引用这个 WASM 程序，最终和 Wasm3 一起编译。</p><h2 id="_6-arduino-平台胶水代码初探" tabindex="-1">6. Arduino 平台胶水代码初探 <a class="header-anchor" href="#_6-arduino-平台胶水代码初探" aria-hidden="true">#</a></h2><p>最终还需要一个 <code>arduino.ino</code> 代码（其实就是针对 Arduino 简化的 C++ 程序）。代码结构如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">include</span><span style="color:#8FBCBB;"> </span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">wasm3.h</span><span style="color:#ECEFF4;">&gt;</span></span>
<span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">include</span><span style="color:#8FBCBB;"> </span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">m3_env.h</span><span style="color:#ECEFF4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 定义 WASM 和 本地栈大小</span></span>
<span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">define</span><span style="color:#5E81AC;"> </span><span style="color:#88C0D0;">WASM_STACK_SLOTS</span><span style="color:#5E81AC;">  </span><span style="color:#B48EAD;">1024</span></span>
<span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">define</span><span style="color:#5E81AC;"> </span><span style="color:#88C0D0;">NATIVE_STACK_SIZE</span><span style="color:#5E81AC;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">32</span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;">1024</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// WASM 最大内存限制, 一般不得超过 64KB 大小</span></span>
<span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">define</span><span style="color:#5E81AC;"> </span><span style="color:#88C0D0;">WASM_MEMORY_LIMIT</span><span style="color:#5E81AC;"> </span><span style="color:#B48EAD;">8096</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 导入 凹语言 生成的 WASM 文件对应的二进制头文件</span></span>
<span class="line"><span style="color:#5E81AC;font-style:italic;">#</span><span style="color:#81A1C1;">include</span><span style="color:#8FBCBB;"> </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">app.wasm.h</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>开头保护 Wasm3 和 WASM 程序对应的头文件，同时定义以下栈的大小。</p><p>然后看看代码主体结构：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">// 执行 WASM 的函数</span></span>
<span class="line"><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">wasm_task</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">void*</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;"> ... </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// setup 作为 main 函数用户</span></span>
<span class="line"><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">setup</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">	// 串口初始化</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#D8DEE9;">Serial</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">begin</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">115200</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">delay</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">	// 等待串口初始化完成, 必须是 USB 串口</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9FF;">Serial</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">	// 阻塞执行 wasm 程序, 不会返回</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">wasm_task</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">NULL</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 该函数不会被执行</span></span>
<span class="line"><span style="color:#616E88;">// 定义该函数只是为了确保 Arduino 编译通过</span></span>
<span class="line"><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">loop</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">delay</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>Arduino 的常规代码只有 setup 和 loop 两个函数。不过这里只用到了 setup 函数。在 setup 函数中首先初始化串口（方便打印调试信息），最后调用 <code>wasm_task</code> 执行凹语言写的亮灯代码，其中会加载 WASM 模块并执行。<code>wasm_task</code> 看起来是一个比较复杂的程序，不过核心逻辑和普通的 WASM 执行流程类似，细节可以下次文章再展开。</p><p>总体来说，以上这些胶水代码是相对固定的。后面会自动生成全部这些代码，同时去掉对外部其他工具的依赖。目标是生成的 Arduino 工程文件可以直接打开构建。</p><h2 id="_7-arduino-构建-执行" tabindex="-1">7. Arduino 构建 &amp; 执行 <a class="header-anchor" href="#_7-arduino-构建-执行" aria-hidden="true">#</a></h2><p>如果是第一次使用 Arduino Nano 33 开发板，打开 IDE 后会提示安装必要的工具。然后需要在库管理菜单手动安装 Wasm3 包：</p><p><img src="`+n+'" alt=""></p><p>然后编译后上传的效果：</p><p><img src="'+l+'" alt=""></p><p>执行的效果，除了可以看到 LED 闪烁，串口还可以看到输出信息：</p><p><img src="'+c+'" alt=""></p><p>一切正常！</p><h2 id="_8-本地模拟执行" tabindex="-1">8. 本地模拟执行 <a class="header-anchor" href="#_8-本地模拟执行" aria-hidden="true">#</a></h2><p>为了方便测试简单程序，凹语言命令行提供了模拟执行 Arduino 的方式：</p><p><img src="'+r+'" alt=""></p><p>目前模拟还比较简单，只是简单打印调用 API 的名字和参数。</p><h2 id="_9-总结展望" tabindex="-1">9. 总结展望 <a class="header-anchor" href="#_9-总结展望" aria-hidden="true">#</a></h2><p>目前流行 Arduino 单片机的配置还是比较低的，可能难以运行 WASM 程序。不过可以乐观估计 Arduino Nano 33 将会很快普及。而且，Wasm3 不仅仅可以支持 Arduino，还可以支持树莓派 Pico（淘宝价格30元）。因此，从长远看 WASM 是一个兼具灵活性和性价比的可选方案。如果确实需要在非常受限的环境秩序，也可以尝试 LLVM 到 AVR 单片机的路线。</p>',51),y=[i];function F(D,d,A,C,u,h){return e(),o("div",null,y)}const B=p(E,[["render",F]]);export{g as __pageData,B as default};
