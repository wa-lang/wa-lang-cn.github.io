import{_ as s,c as a,o as n,a as l}from"./app.7586e3b1.js";const d=JSON.parse('{"title":"凹语言支持运算符重载","description":"","frontmatter":{},"headers":[],"relativePath":"smalltalk/st0040.md"}'),p={name:"smalltalk/st0040.md"},e=l(`<h1 id="凹语言支持运算符重载" tabindex="-1">凹语言支持运算符重载 <a class="header-anchor" href="#凹语言支持运算符重载" aria-hidden="true">#</a></h1><ul><li>时间：2024-04-13</li><li>撰稿：凹语言 开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0040.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0040.html</a></li></ul><hr><p>在新发布的 <a href="https://gitee.com/wa-lang/wa/releases/tag/v0.11.0" target="_blank" rel="noreferrer">v0.11.0</a> 版本中实验性地引入了运算符重载的特性。比如<a href="https://gitee.com/wa-lang/wa/tree/master/waroot/src/apple" target="_blank" rel="noreferrer"><code>apple</code></a>标准库有以下代码：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#616E88;">#wa:operator + MyInt_add</span></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> MyInt :</span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	V: </span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">MyInt_add</span><span style="color:#D8DEE9FF;">(x, y: MyInt) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> x.V </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> y.V</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中<code>MyInt</code>类型针对<code>+</code>运算符进行重载，映射到了<code>MyInt_add</code>全局函数。可以像下面代码这样使用：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;apple&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	x1 </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> apple.MyInt{V: </span><span style="color:#B48EAD;">100</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	x2 </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> apple.MyInt{V: </span><span style="color:#B48EAD;">42</span><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(x1 </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> x2)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>编译器会在编译时根据不同类型和运算符选择合适的函数调用。目前这是一个实验性的特性，未来开发组将根据真实开发场景做调整和完善，也欢迎社区同学参与讨论。</p>`,8),o=[e];function t(c,r,y,i,D,E){return n(),a("div",null,o)}const _=s(p,[["render",t]]);export{d as __pageData,_ as default};
