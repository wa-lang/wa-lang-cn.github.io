import{_ as s,c as n,o as a,a as l}from"./app.7586e3b1.js";const p="/st0082-01.jpg",o="/st0082-02.png",e="/st0082-03.png",c="/st0082-04.png",g=JSON.parse('{"title":"凹语言控制LCD1602液晶显示屏","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. LCD1602 显示屏","slug":"_1-lcd1602-显示屏","link":"#_1-lcd1602-显示屏","children":[]},{"level":2,"title":"2. arduino/lcd1602 包","slug":"_2-arduino-lcd1602-包","link":"#_2-arduino-lcd1602-包","children":[]},{"level":2,"title":"3. Arduino 示例程序","slug":"_3-arduino-示例程序","link":"#_3-arduino-示例程序","children":[]},{"level":2,"title":"4. 额外的收益","slug":"_4-额外的收益","link":"#_4-额外的收益","children":[]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]}],"relativePath":"smalltalk/st0082.md"}'),t={name:"smalltalk/st0082.md"},r=l('<h1 id="凹语言控制lcd1602液晶显示屏" tabindex="-1">凹语言控制LCD1602液晶显示屏 <a class="header-anchor" href="#凹语言控制lcd1602液晶显示屏" aria-hidden="true">#</a></h1><ul><li>时间：2025-07-16</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0082.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0082.html</a></li></ul><hr><p>这是凹语言在 <a href="https://wa-lang.org/smalltalk/st0081.html" target="_blank" rel="noreferrer">第三届软件创新发展大会</a> 上展出的LCD示例程序，效果如下：</p><p><img src="'+p+'" alt=""></p><h2 id="_1-lcd1602-显示屏" tabindex="-1">1. LCD1602 显示屏 <a class="header-anchor" href="#_1-lcd1602-显示屏" aria-hidden="true">#</a></h2><p>LCD1602(Liquid Crystal Display 1602)是一种常见的字符型液晶显示模块，其中1602表示它能够显示16列2行共32个字符字符。LCD1602内置了ASCII中字母、数字和常见的符号点阵字库。类似的还有LCD2004表示20列4行、LCD12864表示128列64行等不同尺寸的显示屏，但是他们引脚都是16个，控制的方式差不多。</p><p><img src="'+o+'" alt=""></p><p>下面是每个引脚的功能：</p><ul><li>VSS（引脚1）：这是接地引脚（0V）</li><li>VDD（引脚2）：这是电源引脚（有3V和5V不同型号）</li><li>V0（引脚3）：对比度调节引脚，连接到电位器的中间引脚，电位器的另外两个端子连接到VDD和GND，一般接的是可变电阻以控制电压</li><li>RS（寄存器选择，引脚4）：用于选择指令寄存器或数据寄存器。当此引脚为低电平时，选择激活命令模式的指令寄存器。当此引脚为高电平时，选择激活数据模式的数据寄存器</li><li>RW（读/写，引脚5）：用于选择读取或写入模式。当此引脚为低电平时，激活写入模式；当此引脚为高电平时，激活读取模式。一般都设置为写模式</li><li>E（启用，引脚6）：用于通过从高到低切换来启动数据读/写操作。</li><li>D0至D7（引脚7-14）：这些是数据引脚。D4-D7在4位和8位传输模式均用于数据传输。一般选择4位传输模式以减少引脚数量</li><li>A（阳极，引脚15）：背光 LED 正极。一般需要通过电阻连接到5V</li><li>K（阴极，引脚16）：背光 LED 负极。一般需要连接到GND</li></ul><p>LCD液晶显示器的工作原理是通过使用液晶精确控制光线来在屏幕上创建图像或文本。每个液晶显示器内部都有一个背光源，提供稳定的光源。特殊的液晶被夹在两层偏光玻璃之间。</p><p><img src="'+e+`" alt=""></p><p>当电流流过这些液晶时，它们的排列方式会发生变化。这种排列方式会影响光线穿过液晶的方式。光线首先穿过第一层偏光玻璃，然后穿过取向液晶，液晶将光线扭转至特定角度。第二层偏光玻璃则根据扭转角度，让扭转的光线通过或阻挡。通过精确控制流向液晶不同区域（或像素）的电流，LCD 可以选择性地允许或阻挡特定区域的光线。这样就能在屏幕上显示图像、数字或文字。</p><h2 id="_2-arduino-lcd1602-包" tabindex="-1">2. <code>arduino/lcd1602</code> 包 <a class="header-anchor" href="#_2-arduino-lcd1602-包" aria-hidden="true">#</a></h2><p>根据LCD1602的引脚说明文档整理如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+---------------------------------------------------------------------+</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> LCD1602 Module                                                      </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+-----+-------+---------------+---------------------+-----------------+</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Pin </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Label </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Connected To  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Description         </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> In Code         </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+-----+-------+---------------+---------------------+-----------------+</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> GND   </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> GND           </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Ground              </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">               </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> VCC   </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> 5V            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Power Supply        </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">               </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> VO    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Potentiometer </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Contrast Control    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">               </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> RS    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D7            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Register Select     </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">digitalWrite</span><span style="color:#D8DEE9FF;">(RS)</span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> RW    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> GND           </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Write Only (GND)    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> always LOW      </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;">  </span><span style="color:#B48EAD;">6</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> E     </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D6            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Enable Signal       </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">pulseEnable</span><span style="color:#D8DEE9FF;">()   </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">11</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D4    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D5            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Data Bit </span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">()    </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">12</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D5    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D4            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Data Bit </span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">()    </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">13</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D6    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D3            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Data Bit </span><span style="color:#B48EAD;">6</span><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">()    </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">14</span><span style="color:#D8DEE9FF;">  </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D7    </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> D2            </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> Data Bit </span><span style="color:#B48EAD;">7</span><span style="color:#D8DEE9FF;">          </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">()    </span><span style="color:#81A1C1;">|</span></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+-----+-------+---------------+---------------------+-----------------+</span></span>
<span class="line"></span></code></pre></div><p>在4位只写模式下RW和D0-D3引脚不需要，而GND/VCC/VO/RW/A/K都有固定的接线。因此只需要定义6个控制引脚：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> LCD1602引脚定义</span></span>
<span class="line"><span style="color:#88C0D0;">global</span><span style="color:#D8DEE9FF;"> (</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	RS :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">7</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	E  :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">6</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D4 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D5 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">4</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D6 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D7 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span></code></pre></div><p>首先是初始化6个引脚为输出模式（对应LCD为输入）：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDInit {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(RS, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(E, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(D4, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(D5, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(D6, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.PinMode(D7, arduino.OUTPUT)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Delay(</span><span style="color:#B48EAD;">50</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 等待LCD启动</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>通过D4-D7每次传入的是4bit的数据或命令，借助<code>write4bits</code>函数完成：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDInit {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 初始化到4</span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">bit模式</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x03</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Delay(</span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x03</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DelayMicroseconds(</span><span style="color:#B48EAD;">150</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x03</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x02</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 设置4</span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">bit模式</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>通过D4-D7传入数据或命令</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(value: </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(D4, </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">((value</span><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">&amp;</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(D5, </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">((value</span><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">&amp;</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(D6, </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">((value</span><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">&amp;</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(D7, </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">((value</span><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">&amp;</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">pulseEnable</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>pulseEnable</code>函数通过控制<code>E</code>引脚的状态控制每个4bit传输：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> pulseEnable {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(E, arduino.LOW)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DelayMicroseconds(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(E, arduino.HIGH)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DelayMicroseconds(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(E, arduino.LOW)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DelayMicroseconds(</span><span style="color:#B48EAD;">100</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 等待命令执行</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>最后是补齐<code>LCDInit</code>函数中清空屏幕等初始化的收尾工作：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDInit {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 几个基本设置</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x28</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">4</span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">bit, 2行, 5x8 点阵</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x08</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 显示关闭</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 清屏</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Delay(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x06</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 输入模式：写入后光标右移</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x0C</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 显示开启，光标关闭</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>在通过<code>LCDInit</code>完成液晶屏初始化工作后，就可以通过命令和数据控制显示内容了。下面是发送命令或数据的<code>send</code>实现：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Send a full </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;"> in two </span><span style="color:#B48EAD;">4</span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">bit </span><span style="color:#88C0D0;">chunks</span><span style="color:#D8DEE9FF;"> (mode: </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> command, </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> data)</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">send</span><span style="color:#D8DEE9FF;">(value, mode: </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.DigitalWrite(</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">(RS), </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">(mode))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(value </span><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">)   </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 高四位</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">write4bits</span><span style="color:#D8DEE9FF;">(value </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0x0F</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 低四位</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><code>send</code>函数是向LCD发送数据或命令，<code>mode</code>参数表示命令还是数据，内部是通过<code>RS</code>引脚控制。基于<code>send</code>函数，可封装<code>command</code>和<code>writeChar</code>写命令和写数据函数：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Send instruction command to LCD (RS</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(value: </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">send</span><span style="color:#D8DEE9FF;">(value, </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">(arduino.LOW))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Write a character to current cursor </span><span style="color:#88C0D0;">position</span><span style="color:#D8DEE9FF;"> (RS</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">writeChar</span><span style="color:#D8DEE9FF;">(value: </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">send</span><span style="color:#D8DEE9FF;">(value, </span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">(arduino.HIGH))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>比如可以通过命令控制光标的位置。第一行光标位置通过0x80到0x90命令控制，第二行光标位置通过0xC0到0xD0命令控制。封装的<code>LCDSetCursor</code>函数如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDSetCursor(row, col: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> row </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x80</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> col))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	} </span><span style="color:#81A1C1;">else</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0xC0</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> col))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后是在当前行列号位置显示一个字符：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDWriteChar(ch: </span><span style="color:#81A1C1;">rune</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">writeChar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">(ch))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>还有清空屏幕的0x01命令：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDClear {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">command</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x01</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Delay(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>到此已经完成lcd1602包的封装，对外的API规格如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> LCD1602引脚定义</span></span>
<span class="line"><span style="color:#88C0D0;">global</span><span style="color:#D8DEE9FF;"> (</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	RS :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">7</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	E  :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">6</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D4 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D5 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">4</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D6 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	D7 :</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 初始化液晶屏</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDInit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 设置光标位置</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDSetCursor(row, col: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 在当前位置开始写字符, 并移动光标</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDWriteChar(ch: </span><span style="color:#81A1C1;">rune</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 清空屏幕</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> LCDClear()</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-arduino-示例程序" tabindex="-1">3. Arduino 示例程序 <a class="header-anchor" href="#_3-arduino-示例程序" aria-hidden="true">#</a></h2><p>参考凹语言主仓库的<code>waroot/examples/arduino-lcd1602</code>目录，构造简化版程序如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 版权 @</span><span style="color:#B48EAD;">2025</span><span style="color:#D8DEE9FF;"> arduino</span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;">lcd1602 作者。保留所有权利。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> (</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#A3BE8C;">&quot;arduino/lcd1602&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#A3BE8C;">&quot;syscall/arduino&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> init {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 初始化屏幕</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	lcd1602.LCDInit()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Loop {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;hello wa-lang!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 清空屏幕, 重新绘制字符串</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	lcd1602.LCDClear()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	SayHello(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, s)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	SayHello(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">, s)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 休眠500毫秒</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	arduino.Delay(</span><span style="color:#B48EAD;">500</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>SayHello</code>在指定行列位置开始显示一个字符串：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> SayHello(row, col: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">, s: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	lcd1602.LCDSetCursor(row, col)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">; i </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">len</span><span style="color:#D8DEE9FF;">(s); i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		lcd1602.LCDWriteChar(</span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">(s[i]))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中Loop函数会一直被循环调用执行，因此可以通过结合清屏和延时来实现动画，完整的例子请参考参考的示例代码。</p><h2 id="_4-额外的收益" tabindex="-1">4. 额外的收益 <a class="header-anchor" href="#_4-额外的收益" aria-hidden="true">#</a></h2><p>以上代码工作的原理可参考生成的C代码，用户可以通过修改模拟宿主导入函数的实现来进行更细粒度的定制。因为本质上是生成了完整的Arduino的C语言工程，所以理论上可以借助C语言编译器将凹语言编译到本地可执行程序。</p><p>以下是凹语言主仓库的<code>waroot/examples/hello</code>示例在Windows下的执行效果：</p><p><img src="`+c+'" alt=""></p><h2 id="_5-小结" tabindex="-1">5. 小结 <a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a></h2><p>这个例子本身并不复杂，但其背后的技术演化从最初的Wasm3虚拟机、到重写wat后端衍生出的wat2c工具、到真正跑通全链路花了将近3年时间。</p><p>凹语言分别在2022年底和2024年底增加了和改善对Arduino平台的支持，当时的技术方案是通过Wasm3虚拟机来执行凹语言输出的wasm程序。但是 Wasm3 最小的硬件依赖是 ~64Kb Flash，对于小内存的单片机支持比较弱。开发组通过wat2c技术去掉了对Wasm3的性能损耗，终于可以让程序运行在只有2KB内存的Arduino Nano开发板上。</p><p>从第一个五年计划的“能用”，到第二个五年计划的“好用”，这个例子正是“好用”的一个侧面写照。我们对任何形式的讨论和合作保持开放态度，期待诸位一起推动新一轮演化！</p>',54),D=[r];function E(y,F,i,C,A,d){return a(),n("div",null,D)}const b=s(t,[["render",E]]);export{g as __pageData,b as default};
