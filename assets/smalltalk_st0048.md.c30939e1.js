import{_ as s,c as a,o as n,a as l}from"./app.7586e3b1.js";const o="/st0048-01.jpg",u=JSON.parse('{"title":"凹语言图书: µGo语言实现","description":"","frontmatter":{},"headers":[{"level":2,"title":"Why: 挖坑的起因","slug":"why-挖坑的起因","link":"#why-挖坑的起因","children":[]},{"level":2,"title":"What: µGo 例子","slug":"what-μgo-例子","link":"#what-μgo-例子","children":[]},{"level":2,"title":"Output: 输出的目标格式","slug":"output-输出的目标格式","link":"#output-输出的目标格式","children":[]}],"relativePath":"smalltalk/st0048.md"}'),p={name:"smalltalk/st0048.md"},t=l('<h1 id="凹语言图书-μgo语言实现" tabindex="-1">凹语言图书: µGo语言实现 <a class="header-anchor" href="#凹语言图书-μgo语言实现" aria-hidden="true">#</a></h1><ul><li>时间：2024-09-05</li><li>撰稿：凹语言 开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0048.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0048.html</a></li></ul><hr><p>本书尝试以凹语言实现 µGo 编译器为线索，以边学习边完善的自举方式实现一个玩具语言。</p><p>仓库地址：<a href="https://github.com/wa-lang/ugo-compiler-book" target="_blank" rel="noreferrer">https://github.com/wa-lang/ugo-compiler-book</a></p><p><img src="'+o+`" alt=""></p><h2 id="why-挖坑的起因" tabindex="-1">Why: 挖坑的起因 <a class="header-anchor" href="#why-挖坑的起因" aria-hidden="true">#</a></h2><ul><li>因为坑就在那里</li><li>挖坑的工具差不多齐全了</li><li>为了启动 <a href="https://github.com/wa-lang/wa" target="_blank" rel="noreferrer">凹语言</a> 的热身项目</li><li>凹语言项目已过5年, 完成了当初不做玩具车的目标, 是时候向凹语言迁移了</li><li>？</li></ul><h2 id="what-μgo-例子" tabindex="-1">What: µGo 例子 <a class="header-anchor" href="#what-μgo-例子" aria-hidden="true">#</a></h2><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">libc</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">libc.math</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">Pi</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3.14</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">Pi_2</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Pi </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> MyInt </span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">global </span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#81A1C1;">*</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">3</span><span style="color:#81A1C1;">+</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">double</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">50</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">println</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">main</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="output-输出的目标格式" tabindex="-1">Output: 输出的目标格式 <a class="header-anchor" href="#output-输出的目标格式" aria-hidden="true">#</a></h2><p>为了跨平台和方便测试，输出LLVM汇编代码，如果以后可能会增加WASM文件。</p><p>该书为开源图书，欢迎参与共建。</p>`,13),e=[t];function r(c,E,i,y,F,D){return n(),a("div",null,e)}const C=s(p,[["render",r]]);export{u as __pageData,C as default};
