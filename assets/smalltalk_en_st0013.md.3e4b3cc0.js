import{_ as s,a}from"./chunks/st0013-02.180850e2.js";import{_ as n,c as e,o as t,a as l}from"./app.7586e3b1.js";const o="/blog0002-01.png",m=JSON.parse('{"title":"Wa Language and Turing & BrainFuck","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. What is a Turing machine","slug":"_1-what-is-a-turing-machine","link":"#_1-what-is-a-turing-machine","children":[]},{"level":2,"title":"2. What is BrainFuck language","slug":"_2-what-is-brainfuck-language","link":"#_2-what-is-brainfuck-language","children":[]},{"level":2,"title":"3. Build BrainFuck VM with Wa","slug":"_3-build-brainfuck-vm-with-wa","link":"#_3-build-brainfuck-vm-with-wa","children":[]},{"level":2,"title":"4. Playground","slug":"_4-playground","link":"#_4-playground","children":[]},{"level":2,"title":"5. Summarize","slug":"_5-summarize","link":"#_5-summarize","children":[]}],"relativePath":"smalltalk/en/st0013.md"}'),p={name:"smalltalk/en/st0013.md"},r=l('<h1 id="wa-language-and-turing-brainfuck" tabindex="-1">Wa Language and Turing &amp; BrainFuck <a class="header-anchor" href="#wa-language-and-turing-brainfuck" aria-hidden="true">#</a></h1><p>Wa is a general-purpose programming language designed for developing robustness and maintainability WebAssembly software. Instead of requiring complex toolchains to set up, you can simply go install it - or run it in a browser. Let&#39;s try to build a BrainFuck language virtual machine with Wa language.</p><p>⭐️ If you like Wa Language, give it a star on Github: <a href="https://github.com/wa-lang/wa" target="_blank" rel="noreferrer">https://github.com/wa-lang/wa</a></p><h2 id="_1-what-is-a-turing-machine" tabindex="-1">1. What is a Turing machine <a class="header-anchor" href="#_1-what-is-a-turing-machine" aria-hidden="true">#</a></h2><p>Turing machine is an abstract computing model proposed by Alan Turing. The machine has an infinite strip of paper divided into small squares, each with a different color, similar to memory in a computer. At the same time, the machine has a probe that moves up and down the tape, sort of reading and writing data from memory by memory address. The machine head has a set of internal computational states and some fixed programs (more like a Harvard structure). At each moment, the machine head reads a square of information from the current tape, and then outputs the information to the tape square according to its internal state and the program instructions it is currently executing, while updating its internal state and moving.</p><p><img src="'+s+'" alt=""></p><h2 id="_2-what-is-brainfuck-language" tabindex="-1">2. What is BrainFuck language <a class="header-anchor" href="#_2-what-is-brainfuck-language" aria-hidden="true">#</a></h2><p>Turing machines are not easy to program, but they are very easy to understand. There is a minimized BrainFuck computer language that works very much like a Turing machine. BrainFuck was created by Urban Muller in 1993 and is called BF language for short. Muller&#39;s original design goal was to build a simple programming language that could be implemented with a minimal compiler and was in line with Turing&#39;s idea of completeness. The language consists of eight states, and the early compiler (second edition) for the Amiga machine was only 240 bytes in size!</p><p><img src="'+a+`" alt=""></p><p>As the name suggests, the brainfuck program is hard to read. Still, the brainfuck Turing machine can do just about any computational task. brainfuck&#39;s calculations are unusual, but they do work correctly. The language is based on a simple machine model that, in addition to instructions, consists of an array in bytes initialized to zero, a pointer to the array (initially to the first byte of the array), and two byte streams for input and output. It is a Turing-complete language, and its main design idea is to implement a &quot;simple&quot; language with minimal concepts. The BrainFuck language has only eight symbols, and all operations are done by combinations of these eight symbols.</p><p>Here is a description of the eight states, each of which is identified by a character:</p><table><thead><tr><th>Command</th><th>C code</th><th>Description</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td><code>++ptr;</code></td><td>Move the pointer to the right</td></tr><tr><td><code>&lt;</code></td><td><code>--ptr;</code></td><td>Move the pointer to the left</td></tr><tr><td><code>+</code></td><td><code>++*ptr;</code></td><td>Increment the memory cell at the pointer</td></tr><tr><td><code>-</code></td><td><code>--*ptr;</code></td><td>Decrement the memory cell at the pointer</td></tr><tr><td><code>.</code></td><td><code>putchar(*ptr);</code></td><td>Output the character signified by the cell at the pointer</td></tr><tr><td><code>,</code></td><td><code>*ptr = getch();</code></td><td>Input a character and store it in the cell at the pointer</td></tr><tr><td><code>[</code></td><td><code>while(*ptr) {}</code></td><td>Jump past the matching <code>]</code> if the cell at the pointer is 0</td></tr><tr><td><code>]</code></td><td></td><td>Jump back to the matching <code>[</code> if the cell at the pointer is nonzero</td></tr></tbody></table><p>Here is a brainfuck program that prints the &quot;hi&quot; string to standard output:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">++++++++++[&gt;++++++++++&lt;-]&gt;++++.+.</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>In theory, we can use BF as the target machine language and compile other high-level languages into BF to run on BF machines.</p><h2 id="_3-build-brainfuck-vm-with-wa" tabindex="-1">3. Build BrainFuck VM with Wa <a class="header-anchor" href="#_3-build-brainfuck-vm-with-wa" aria-hidden="true">#</a></h2><p>Start by constructing a virtual machine structure:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> BrainFuck </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	mem  :[</span><span style="color:#B48EAD;">30000</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">byte</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	code :</span><span style="color:#81A1C1;">string</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	pos  :</span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	pc   :</span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>Where mem represents the virtual machine&#39;s 30,000 bytes of memory, then code represents the input BF program, pos represents the current output location, pc is the instruction location.</p><p>Then wrap the corresponding constructor and Run method:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> NewBrainFuck(code: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">BrainFuck {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;">BrainFuck{code: code}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.Run() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#616E88;"># ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>Here&#39;s how the main function constructs the BrainFuck VM and executes it:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#616E88;"># print hi</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> code </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;++++++++++[&gt;++++++++++&lt;-]&gt;++++.+.&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	vm </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> NewBrainFuck(code)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	vm.Run()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>Let&#39;s look at the implementation of the <code>BrainFuck.Run</code> function:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.Run() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> ; </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">len</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code); </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">switch</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc]; x {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;&gt;&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;&lt;&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;+&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;-&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;[&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos] </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">				</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;]&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos] </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">				</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;.&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#88C0D0;">print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">rune</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;,&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#616E88;"># </span><span style="color:#81A1C1;">TODO:</span><span style="color:#616E88;"> support read byte</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>Basically, the instructions in BF language are interpreted one by one. Where the output is printed by the print built-in function, the input instruction is not processed.</p><p>In addition, the <code>BrainFuck.loop</code> private method is used to handle nested instructions:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(inc: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> inc; i </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">; </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> inc {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">switch</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;">inc] {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;[&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			i</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;]&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			i</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>The complete code <a href="https://gitee.com/wa-lang/wa/blob/master/brainfuck.wa" target="_blank" rel="noreferrer">brainfuck.wa</a>。</p><p>To clone the latest Wa Git repository, then execute in the root directory:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run brainfuck.wa </span></span>
<span class="line"><span style="color:#d8dee9ff;">hi</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_4-playground" tabindex="-1">4. Playground <a class="header-anchor" href="#_4-playground" aria-hidden="true">#</a></h2><p>Run the example in the playground: <a href="https://wa-lang.org/playground/" target="_blank" rel="noreferrer">https://wa-lang.org/playground/</a></p><p><img src="`+o+'" alt=""></p><h2 id="_5-summarize" tabindex="-1">5. Summarize <a class="header-anchor" href="#_5-summarize" aria-hidden="true">#</a></h2><p>While BrainFuck may seem like a very simple language, it is a Turing complete programming language. In theory, any high-level language written procedures can be simulated by BF language equivalent procedures. Since it is possible to implement a BF virtual machine through a Wa language, the Wa language must also be Turing complete, and next time we hope to build more complex and interesting programs through a Wa language.</p>',36),c=[r];function i(y,d,F,E,D,u){return t(),e("div",null,c)}const C=n(p,[["render",i]]);export{m as __pageData,C as default};
