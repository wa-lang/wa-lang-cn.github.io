import{_ as s,c as n,o as a,a as l}from"./app.7586e3b1.js";const d=JSON.parse('{"title":"凹语言支持for range迭代器","description":"","frontmatter":{},"headers":[],"relativePath":"smalltalk/st0074.md"}'),p={name:"smalltalk/st0074.md"},o=l(`<h1 id="凹语言支持for-range迭代器" tabindex="-1">凹语言支持for range迭代器 <a class="header-anchor" href="#凹语言支持for-range迭代器" aria-hidden="true">#</a></h1><ul><li>时间：2025-03-24</li><li>撰稿：凹语言 开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0074.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0074.html</a></li></ul><hr><p>在新发布的 <a href="https://gitcode.com/wa-lang/wa/releases/v0.22.0" target="_blank" rel="noreferrer">v0.22.0</a> 版本中实验性地引入了for range迭代器支持。比如内置了对整数值迭代的支持：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(i)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>本质上这和运算符重载是类似的特性，这里是<code>range</code>运算符内置对整数进行的重载。更有趣的是<code>range</code>运算符还针对可被调用对象进行了重载，这样就可以实现自定义迭代器的能力：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> MyObject :</span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	elems: []</span><span style="color:#81A1C1;">string</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> New(a: ...</span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">MyObject {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;">MyObject{elems: a}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> MyObject.Iter </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> (ok: </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;">, k: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">, v: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	idx: </span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> (ok: </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;">, k: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">, v: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> ok </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> idx </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">len</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.elems); ok {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			k, v </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> idx, </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.elems[idx]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			idx</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i, v </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> New(</span><span style="color:#A3BE8C;">&quot;aa&quot;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#A3BE8C;">&quot;bb&quot;</span><span style="color:#D8DEE9FF;">, </span><span style="color:#A3BE8C;">&quot;cc&quot;</span><span style="color:#D8DEE9FF;">).Iter() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(i, v)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中MyObject类型的Iter方法返回的是一个闭包函数对象：该闭包函数返回ok、key和value三个值，其中ok决定何时迭代终止，后续的2个返回值可以根据需要省略一个。</p><p>运行的结果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run a.out.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">0 aa</span></span>
<span class="line"><span style="color:#d8dee9ff;">1 bb</span></span>
<span class="line"><span style="color:#d8dee9ff;">2 cc</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>目前这是一个实验性的特性，未来开发组将根据真实开发场景做调整和完善，也欢迎社区同学参与讨论。</p>`,11),e=[o];function t(c,r,D,E,y,F){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
