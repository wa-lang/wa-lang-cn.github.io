import{_ as s,c as a,o as n,a as l}from"./app.7586e3b1.js";const d=JSON.parse('{"title":"凹语言如何做单元测试?","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 斐波那契数列","slug":"_1-斐波那契数列","link":"#_1-斐波那契数列","children":[]},{"level":2,"title":"2. 测试斐波那契数列","slug":"_2-测试斐波那契数列","link":"#_2-测试斐波那契数列","children":[]},{"level":2,"title":"3. 构造一个失败的测试","slug":"_3-构造一个失败的测试","link":"#_3-构造一个失败的测试","children":[]},{"level":2,"title":"4. 修复失败的测试","slug":"_4-修复失败的测试","link":"#_4-修复失败的测试","children":[]},{"level":2,"title":"5. TestXXX测试函数","slug":"_5-testxxx测试函数","link":"#_5-testxxx测试函数","children":[]},{"level":2,"title":"6. 异常的测试","slug":"_6-异常的测试","link":"#_6-异常的测试","children":[]},{"level":2,"title":"7. 工程中的测试","slug":"_7-工程中的测试","link":"#_7-工程中的测试","children":[]},{"level":2,"title":"8. 小结","slug":"_8-小结","link":"#_8-小结","children":[]}],"relativePath":"smalltalk/st0084.md"}'),p={name:"smalltalk/st0084.md"},o=l(`<h1 id="凹语言如何做单元测试" tabindex="-1">凹语言如何做单元测试? <a class="header-anchor" href="#凹语言如何做单元测试" aria-hidden="true">#</a></h1><ul><li>时间：2025-07-30</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0084.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0084.html</a></li></ul><hr><p>在凹语言中，以 <code>test_xxx.wa</code> 或 <code>xxx_test.wa</code> 形式命名的文件对应测试代码，测试代码可以单文件执行也可以放在工程文件中执行。</p><h2 id="_1-斐波那契数列" tabindex="-1">1. 斐波那契数列 <a class="header-anchor" href="#_1-斐波那契数列" aria-hidden="true">#</a></h2><p>斐波那契数数列对应一个兔子繁殖的题目，对应的数学定义为：<code>F(0)=1, F(1)=1, F(n)=F(n-1)+F(n-2)</code>。对应的数列为：1、1、2、3、5、8、13、21、34……。我们现在以凹语言构造这个程序。</p><p>创建 <code>fib.wa</code> 文件（不是测试文件），构造一个凹语言斐波那契数列的例子：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(Fibonacci(i))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">, ...</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Fibonacci(i: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>执行结果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">1</span></span>
<span class="line"><span style="color:#d8dee9ff;">1</span></span>
<span class="line"><span style="color:#d8dee9ff;">2</span></span>
<span class="line"><span style="color:#d8dee9ff;">3</span></span>
<span class="line"><span style="color:#d8dee9ff;">5</span></span>
<span class="line"><span style="color:#d8dee9ff;">8</span></span>
<span class="line"><span style="color:#d8dee9ff;">13</span></span>
<span class="line"><span style="color:#d8dee9ff;">21</span></span>
<span class="line"><span style="color:#d8dee9ff;">34</span></span>
<span class="line"><span style="color:#d8dee9ff;">55</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_2-测试斐波那契数列" tabindex="-1">2. 测试斐波那契数列 <a class="header-anchor" href="#_2-测试斐波那契数列" aria-hidden="true">#</a></h2><p>为了方便演示，我们可以构造等价的 <code>test_fib.wa</code> 测试文件：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Example {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(Fibonacci(i))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Output:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">8</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">13</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">21</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">34</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">55</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">, ...</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Fibonacci(i: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中<code>Example</code>对应<code>main</code>函数，其中<code>// Output:</code>标注的是期望的结果。然后通过<code>wa test</code>命令以测试的方式运行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa test test_fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">ok   __main__ 97ms</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>表明测试通过。</p><h2 id="_3-构造一个失败的测试" tabindex="-1">3. 构造一个失败的测试 <a class="header-anchor" href="#_3-构造一个失败的测试" aria-hidden="true">#</a></h2><p>斐波那契数列的输入参数默认都是非负整数，因此如果出现输入负数等无效输入我们希望返回0。构造测试例子：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> ExampleFibonacci_invalid {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Output:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>重新执行测试：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa test test_fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">---- __main__.ExampleFibonacci_invalid</span></span>
<span class="line"><span style="color:#d8dee9ff;">    expect = &quot;0&quot;, got = &quot;1&quot;</span></span>
<span class="line"><span style="color:#d8dee9ff;">FAIL __main__ 90ms</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>测试失败。这时候如果通过<code>-run=Example</code>参数只运行<code>Example</code>函数依然是成功的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa test -run=Example test_fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">ok   __main__ 107ms</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_4-修复失败的测试" tabindex="-1">4. 修复失败的测试 <a class="header-anchor" href="#_4-修复失败的测试" aria-hidden="true">#</a></h2><p>改进函数对负数的输出检查：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> Fibonacci(i: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> Fibonacci(i</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>重新运行测试：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa test test_fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">ok   __main__ 125ms</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>现在成功了。</p><h2 id="_5-testxxx测试函数" tabindex="-1">5. <code>TestXXX</code>测试函数 <a class="header-anchor" href="#_5-testxxx测试函数" aria-hidden="true">#</a></h2><p>之前都是通过<code>Example</code>开头的示例测试，通过验证输出的结果来判断测试代码是否正常。这种<code>ExampleXXX</code>示例测试很像传统的集成测试，每个测试函数类型独立运行的<code>main</code>函数，并且两次运行之间没有上下文的干扰。</p><p>除了测试打印输出，还可以在<code>TestXXX</code>测试函数中通过<code>assert</code>函数进行测试。<code>assert</code>函数是测试环境的内置函数，函数签名如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(ok: </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(ok: </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;">, errMessage: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span></code></pre></div><p>第一个参数是必选的测试条件，如果为<code>false</code>则测试失败。第二个是可选的测试失败时输出的信息。</p><p>先构造一个失败的测试：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> TestFibonacci {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#A3BE8C;">&quot;expect 0&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>运行的结果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa test test_fib.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">    assert failed: expect 0 (test_fib.wa:45:8)</span></span>
<span class="line"><span style="color:#d8dee9ff;">    module &quot;unittest://test_fib.wa&quot; closed with exit_code(1)</span></span>
<span class="line"><span style="color:#d8dee9ff;">exit status 1</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>失败的信息中包含了失败的原因和对应的位置。修正后的测试函数如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> TestFibonacci {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">, </span><span style="color:#A3BE8C;">&quot;expect 0&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">assert</span><span style="color:#D8DEE9FF;">(Fibonacci(</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_6-异常的测试" tabindex="-1">6. 异常的测试 <a class="header-anchor" href="#_6-异常的测试" aria-hidden="true">#</a></h2><p>之前我们将负数的输出返回了0，现在我们希望在输入错误是抛出异常，代码如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> FibonacciV2(i: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">panic</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&quot;invalid&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> Fibonacci(i)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>要测试异常，必须通过<code>Example</code>示例测试：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> ExampleFibonacciV2 {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    FibonacciV2(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> Output(panic):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> invalid</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>通过<code>// Output(panic):</code>表注期望输出的异常输出信息。如果有异常并且匹配输出结果则测试通过。</p><h2 id="_7-工程中的测试" tabindex="-1">7. 工程中的测试 <a class="header-anchor" href="#_7-工程中的测试" aria-hidden="true">#</a></h2><p>对于完整的凹语言工程（含有<code>wa.mod</code>文件），可以将函数的实现和测试代码分别存放便于管理。</p><h2 id="_8-小结" tabindex="-1">8. 小结 <a class="header-anchor" href="#_8-小结" aria-hidden="true">#</a></h2><p>凹语言测试框架麻雀虽小五脏俱全，提供了单元测试、集成测试、异常测试，并且支持执行指定的测试函数。</p>`,50),e=[o];function c(t,r,E,D,y,F){return n(),a("div",null,e)}const A=s(p,[["render",c]]);export{d as __pageData,A as default};
