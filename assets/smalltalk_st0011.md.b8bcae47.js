import{_ as s}from"./chunks/st0001.2b3876e3.js";import{_ as a,c as l,o as n,a as e}from"./app.7586e3b1.js";const p="/st0011-01.png",o="/st0011-02.png",t="/st0011-03.png",r="/st0011-04.png",c="/st0011-05.png",i="/st0011-06.png",d="/st0011-07.png",E="/st0011-08.jpg",h="/st0011-09.png",w=JSON.parse('{"title":"凹语言 开源季度总结-CSDN","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 凹语言简介","slug":"_1-凹语言简介","link":"#_1-凹语言简介","children":[]},{"level":2,"title":"2. 凹语言项目发起人","slug":"_2-凹语言项目发起人","link":"#_2-凹语言项目发起人","children":[]},{"level":2,"title":"3. 设计哲学和开发计划","slug":"_3-设计哲学和开发计划","link":"#_3-设计哲学和开发计划","children":[]},{"level":2,"title":"4. 取得了哪些进展","slug":"_4-取得了哪些进展","link":"#_4-取得了哪些进展","children":[{"level":3,"title":"4.1 发布第三版网站","slug":"_4-1-发布第三版网站","link":"#_4-1-发布第三版网站","children":[]},{"level":3,"title":"4.2 发布纯浏览器环境的的 Playground","slug":"_4-2-发布纯浏览器环境的的-playground","link":"#_4-2-发布纯浏览器环境的的-playground","children":[]},{"level":3,"title":"4.3 创建 VSCode/Fleet/Vim 等高亮插件","slug":"_4-3-创建-vscode-fleet-vim-等高亮插件","link":"#_4-3-创建-vscode-fleet-vim-等高亮插件","children":[]},{"level":3,"title":"4.4 WASM 后端原型如期发布","slug":"_4-4-wasm-后端原型如期发布","link":"#_4-4-wasm-后端原型如期发布","children":[]},{"level":3,"title":"4.5 作为嵌入 Go 程序脚本","slug":"_4-5-作为嵌入-go-程序脚本","link":"#_4-5-作为嵌入-go-程序脚本","children":[]},{"level":3,"title":"4.6 LLVM 后端提前启动","slug":"_4-6-llvm-后端提前启动","link":"#_4-6-llvm-后端提前启动","children":[]}]},{"level":2,"title":"5. 展望","slug":"_5-展望","link":"#_5-展望","children":[]}],"relativePath":"smalltalk/st0011.md"}'),F={name:"smalltalk/st0011.md"},y=e('<h1 id="凹语言-开源季度总结-csdn" tabindex="-1">凹语言 开源季度总结-CSDN <a class="header-anchor" href="#凹语言-开源季度总结-csdn" aria-hidden="true">#</a></h1><ul><li>时间：2022-11-03</li><li>撰稿：凹语言 开发组</li><li>责编 | 梦依丹</li><li>CSDN首发标题：一个没有KPI的国产编程语言，开源3个月有了哪些新进展？</li><li>CSDN首发地址：<a href="https://mp.weixin.qq.com/s/_D7gVWtF1tkvxteRGXkP-Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/_D7gVWtF1tkvxteRGXkP-Q</a></li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0011.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0011.html</a></li></ul><hr><blockquote><p>【CSDN 编者按】放眼各大编程语言排行榜，几乎很难看到国产编程语言身影，伴随着我国基础软硬件的发力与追赶，尤其是在操作系统、数据库等技术领域的累积，我们也渐渐看到一些国产编程语言的诞生，例如由一群 Go 语言爱好者发起的凹语言，2018 年筹备再到今年 7 月正式开源，其背后有着怎样的故事，开源 3 个月后，其又进行了哪些改进与提升呢？</p></blockquote><p>凹语言最近刚刚发布 v0.3.0，而正式开源不知不觉已经过去一个季度，这是凹语言开源的第一个季度的非正式总结，也是对未来的计划和展望。</p><h2 id="_1-凹语言简介" tabindex="-1">1. 凹语言简介 <a class="header-anchor" href="#_1-凹语言简介" aria-hidden="true">#</a></h2><p>凹语言（凹读音“wā”）是 国内 Gopher 针对 WASM 平台设计的通用编程语言。凹语言作为WASM原生 的编程语言，天然对浏览器环境亲和，同时支持 Linux、macOS 和 Windows 等主流操作系统，此外通过 LLVM 后端对本地应用和单片机等环境提供支持。</p><ul><li>官网：<a href="https://wa-lang.org/" target="_blank" rel="noreferrer">https://wa-lang.org/</a></li><li>仓库：<a href="https://gitee.com/wa-lang/wa/" target="_blank" rel="noreferrer">https://gitee.com/wa-lang/wa/</a></li><li>Play：<a href="https://wa-lang.org/playground/" target="_blank" rel="noreferrer">https://wa-lang.org/playground/</a></li></ul><p>下面是凹语言的Logo：</p><p><img src="'+p+'" alt=""></p><p>从形状上看，“凹”字形似 WASM 图标（方块上部缺个口）；从读音上看，“凹”正好是 WASM 的前半部；从结构上看，实心的“凹”字约等于字母“C”逆时针旋转 90 度——C 可以理解为 C 语言，也可以理解为 Coder，那么“凹”也可以暗示躺平的的 C/躺平的 Coder……</p><h2 id="_2-凹语言项目发起人" tabindex="-1">2. 凹语言项目发起人 <a class="header-anchor" href="#_2-凹语言项目发起人" aria-hidden="true">#</a></h2><p>该项目的发起人柴树杉、丁尔男均是国内资深 Gopher。其中柴树杉是《Go 语言高级编程》等多本 Go 畅销书作者。丁尔男是《WebAssembly 标准入门》等多本 WASM 专著作者，长年从事 3D 开发热衷于性能优化，目前在航天远景科技股份有限公司分管 3D 相关产品开发工作。</p><p>在开发实践中，因为不同的原因，先后萌生了发展一门新语言的想法，Go 语言克制的风格是我们对于编程语言审美的最大公约数，因此选择它作为初始的蓝本。不必讳言：本项目启动时大量借鉴了 Go 的设计思想和具体实现——这是在有限投入下不得不作出的折衷，我们希望随着项目的发展，积累更多原创的设计，为自主创新的大潮贡献一点力量。</p><h2 id="_3-设计哲学和开发计划" tabindex="-1">3. 设计哲学和开发计划 <a class="header-anchor" href="#_3-设计哲学和开发计划" aria-hidden="true">#</a></h2><p>凹语言的整体设计，是围绕着“对开发人员友好”来进行的。字符串/切片作为基本类型、无需（也不能）手动管理内存、视觉上更显著的变量类型定义等均是这一核心思想的具体体现。</p><p>2022 年 7 月，凹语言正式开源，并公布了半年度的线路图：</p><p><img src="'+s+'" alt=""></p><p>随着项目的公开，有了更多的同学加入了凹语言开发组，讨论组社区也逐渐形成并保持活跃。感谢开发组的同学协同努力，第一季度的目标全部达成！</p><h2 id="_4-取得了哪些进展" tabindex="-1">4. 取得了哪些进展 <a class="header-anchor" href="#_4-取得了哪些进展" aria-hidden="true">#</a></h2><p>首先，经过多次讨论，开发组慎重决定凹语言采用 AGPLv3 开源协议，并制定了对应的了凹语言贡献协议。目前已经有外部同学通过新的流程贡献了代码。此外还取得了以下重大进展。</p><h3 id="_4-1-发布第三版网站" tabindex="-1">4.1 发布第三版网站 <a class="header-anchor" href="#_4-1-发布第三版网站" aria-hidden="true">#</a></h3><p>从 2018 年起，网站经过 3 次较大更新。最开始第一版的网站只有一个静态页面（2018），第二版是刚开源时基于 MDBoo k构建（2022年7月），最新版本于 2022 年 9 月开发到 10 月底正式上线。</p><p><img src="'+o+'" alt=""></p><p>该版本网站由子项目负责人扈梦明开发，他还是凹语言 VSCode 插件和 Playground 的负责人。</p><h3 id="_4-2-发布纯浏览器环境的的-playground" tabindex="-1">4.2 发布纯浏览器环境的的 Playground <a class="header-anchor" href="#_4-2-发布纯浏览器环境的的-playground" aria-hidden="true">#</a></h3><p>Playground 是一套在线编译凹源代码并执行的环境。该环境的编译、执行没有调用后端服务，完全在页面中运行；是一个非常便捷的体验、测试凹语言的入口。</p><p><img src="'+t+'" alt=""></p><ul><li>Playground 地址：<a href="https://wa-lang.org/playground/" target="_blank" rel="noreferrer">https://wa-lang.org/playground/</a></li></ul><h3 id="_4-3-创建-vscode-fleet-vim-等高亮插件" tabindex="-1">4.3 创建 VSCode/Fleet/Vim 等高亮插件 <a class="header-anchor" href="#_4-3-创建-vscode-fleet-vim-等高亮插件" aria-hidden="true">#</a></h3><p>VSCode 插件提供了语法高亮、代码片段补全、补全建议等功能，支持纯 Web 环境安装：)</p><p><img src="'+r+'" alt=""></p><p>9 月 JetBrains Fleet 发布了预览版本，凹语言第一时间开发了高亮插件：</p><p><img src="'+c+'" alt=""></p><p>当然，传统的 Vim 插件也不能少：</p><p><img src="'+i+`" alt=""></p><p>更多和插件和功能完善希望社区同学参与共建。</p><h3 id="_4-4-wasm-后端原型如期发布" tabindex="-1">4.4 WASM 后端原型如期发布 <a class="header-anchor" href="#_4-4-wasm-后端原型如期发布" aria-hidden="true">#</a></h3><p>WASM 后端原型如期发布，已支持数值/字符串基本类型、结构体、方法、数组、切片等常用特性，项目组开始着手以此为基础开发贪吃蛇等带有交互功能的网页小游戏。</p><p>可以通过以下方式测试：</p><ol><li><code>go install wa-lang.org/wa@latest</code></li><li><code>wa init -name=_examples/hi</code></li><li><code>wa run _examples/hi</code></li></ol><p>或者创建以 <code>hello.wa</code> 文件，包含下代码</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&quot;你好，凹语言！&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">40</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(a: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">, b: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> a</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;">b</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>运行并输出结果:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run hello.wa </span></span>
<span class="line"><span style="color:#d8dee9ff;">你好，凹语言！</span></span>
<span class="line"><span style="color:#d8dee9ff;">42</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>程序默认会基于WAT后端编译并执行，看到以上输出表示一切正常！</p><h3 id="_4-5-作为嵌入-go-程序脚本" tabindex="-1">4.5 作为嵌入 Go 程序脚本 <a class="header-anchor" href="#_4-5-作为嵌入-go-程序脚本" aria-hidden="true">#</a></h3><p>凹语言也可以作为 Go 语言包被导入，然后以脚本方式执行：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">package</span><span style="color:#D8DEE9FF;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fmt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">wa-lang.org/wa/api</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">main</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">output</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> api</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">RunCode</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello.wa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">func main() { println(40+2) }</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    fmt</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">string</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">output</span><span style="color:#ECEFF4;">),</span><span style="color:#D8DEE9FF;"> err</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-6-llvm-后端提前启动" tabindex="-1">4.6 LLVM 后端提前启动 <a class="header-anchor" href="#_4-6-llvm-后端提前启动" aria-hidden="true">#</a></h3><p>原定于 2023 年春节后启动的 LLVM 后端，提前启动。LLVM 后端的主战场在本地和嵌入式环境，下面是凹程序翻译到 LLVM-IR 的效果：</p><p><img src="`+d+'" alt=""></p><p>目前已经支持素数例子的执行：</p><p><img src="'+E+'" alt=""></p><p>更新路线图：</p><p><img src="'+h+'" alt=""></p><h2 id="_5-展望" tabindex="-1">5. 展望 <a class="header-anchor" href="#_5-展望" aria-hidden="true">#</a></h2><p>目前，凹语言是一个爱好者共建的业余项目，没有设置 KPI。一门新语言真正达到实用化，所需的工作量极其巨大，我们热切的期望更多有兴趣的同学能参与共建，尤其是承担子项目负责人的职责。</p><p>与普通贡献者相比，子项目负责人可以直接参与决策，在项目发展中获得上不封顶的话语权。由于尚处于起步阶段，可以单独成为子项目的模块遍地都是：一组堆管理函数、一个wat转二进制wasm的包、一种与其他语言交互的接口……</p><p>出名要趁早，参与开源同样需要趁早，欢迎参与共建。</p>',60),_=[y];function g(D,u,C,m,f,k){return n(),l("div",null,_)}const A=a(F,[["render",g]]);export{w as __pageData,A as default};
