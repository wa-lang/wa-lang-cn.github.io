import{_ as s,c as n,o as a,a as l}from"./app.7586e3b1.js";const p="/st0092-01.png",e="/st0092-02.png",C=JSON.parse('{"title":"凹语言版CSP-J 2025真题详解","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. CSP 2025入门组第二轮 第1题","slug":"_1-csp-2025入门组第二轮-第1题","link":"#_1-csp-2025入门组第二轮-第1题","children":[]},{"level":2,"title":"2. 凹语言版本的准备工作","slug":"_2-凹语言版本的准备工作","link":"#_2-凹语言版本的准备工作","children":[{"level":3,"title":"2.1 包装导入函数（英文版）","slug":"_2-1-包装导入函数-英文版","link":"#_2-1-包装导入函数-英文版","children":[]},{"level":3,"title":"2.2 包装导入函数（中文版）","slug":"_2-2-包装导入函数-中文版","link":"#_2-2-包装导入函数-中文版","children":[]}]},{"level":2,"title":"3. 凹语言的解题思路","slug":"_3-凹语言的解题思路","link":"#_3-凹语言的解题思路","children":[]},{"level":2,"title":"3. 结语：算法之外的实战价值","slug":"_3-结语-算法之外的实战价值","link":"#_3-结语-算法之外的实战价值","children":[]}],"relativePath":"smalltalk/st0092.md"}'),o={name:"smalltalk/st0092.md"},t=l('<h1 id="凹语言版csp-j-2025真题详解" tabindex="-1">凹语言版CSP-J 2025真题详解 <a class="header-anchor" href="#凹语言版csp-j-2025真题详解" aria-hidden="true">#</a></h1><ul><li>时间：2025-11-02</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0092.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0092.html</a></li></ul><hr><p>CSP-J是由中国计算机学会（CCF）主办的计算机软件能力认证，分为**CSP-J（入门级）和CSP-S（提高级）**两个级别。CSP-J主要考察选手的编程基础和算法能力，适合初一的学生，比赛分为初赛（笔试）和复赛（上机编程）两个阶段。参与CSP-J的选手有机会获得重点中学和大学的特招资格，部分高校在“强基计划”中优先录取。</p><p>2025年CSP-J/S复赛在11月1日上午结束。本文尝试通过凹语言来讲解CSP-J的真题，通过不同的视角体会算法问题和工程问题的差异。</p><h2 id="_1-csp-2025入门组第二轮-第1题" tabindex="-1">1. CSP 2025入门组第二轮 第1题 <a class="header-anchor" href="#_1-csp-2025入门组第二轮-第1题" aria-hidden="true">#</a></h2><p><img src="'+p+'" alt=""></p><p>这道题目的背景是给出一个包含大小写字母和数字（1 到 9）的混合字符串。任务是从中提取出所有有效的数字字符，然后用这些数字，不遗漏地、按任意顺序排列组合，最终要拼出一个最大的正整数。</p><p>比如“290es1q0”可以拼出最大的数字是92100。</p><p><img src="'+e+`" alt=""></p><h2 id="_2-凹语言版本的准备工作" tabindex="-1">2. 凹语言版本的准备工作 <a class="header-anchor" href="#_2-凹语言版本的准备工作" aria-hidden="true">#</a></h2><p>当前凹语言的最新版本为 v1.3.0，尚未提供本地文件的读写功能。因此首先需要解决的是为凹语言设计和实现输入函数。</p><h3 id="_2-1-包装导入函数-英文版" tabindex="-1">2.1 包装导入函数（英文版） <a class="header-anchor" href="#_2-1-包装导入函数-英文版" aria-hidden="true">#</a></h3><p>目前的凹语言底层基于WebAssembly引擎执行，因此可以给宿主增加2个读标准输入的函数：</p><ul><li><code>func getStdinSize() =&gt; i32</code>：获取stdin标准数据的总字节长度。</li><li><code>func getStdinData(ptr: i32)</code>：读取stdin标准数据到指定的wasm内存地址。</li></ul><p>为何要这样设计？这是为了通过最简单的方式满足凹语言读取标准输入字符串的需求，也是解CSP-J第一题的必要前提。而且竞赛本身也是从stdin读取数据，这样可以避免读文件时，文字名字符串带来的复杂度（比如wasm的宿组函数参数全部都是整数类型，不能原生支持字符串）。</p><p>有了以上的宿组函数之后，可以通过以下代码包装为凹语言的函数：</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">#wa</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> cspj getStdinSize</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">getStdinSize</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> i32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">#wa</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> cspj getStdinData</span></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">getStdinData</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">ptr</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> i32</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span></code></pre></div><p>其中<code>#wa:import</code>导入宿组函数的指令，<code>cspj getStdinSize</code>表示“cspj”环境的“getStdinSize”函数。目前还没有“cspj”环境，还只是在设计阶段。</p><p>有了以上2个函数就可以包装读取输入的函数：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;unsafe&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">readInput</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    n </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">getStdinSize</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    d </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">make</span><span style="color:#D8DEE9FF;">([]</span><span style="color:#81A1C1;">byte</span><span style="color:#D8DEE9FF;">, n)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">getStdinData</span><span style="color:#D8DEE9FF;">(unsafe.Raw(d))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> d</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>代码中<code>unsafe.Raw(d)</code>是为了获取字节切片的地址。</p><h3 id="_2-2-包装导入函数-中文版" tabindex="-1">2.2 包装导入函数（中文版） <a class="header-anchor" href="#_2-2-包装导入函数-中文版" aria-hidden="true">#</a></h3><p>以上是凹语言英文的写法。首先是用中文名字来设计导入函数：</p><ul><li><code>func 获取标准输入数据大小() =&gt; i32</code>：获取stdin标准数据的总字节长度。</li><li><code>func 获取标准输入数据(ptr: i32)</code>：读取stdin标准数据到指定的wasm内存地址。</li></ul><p>我们也可以通过凹语言中文来编写这个导入代码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">#凹:导入 信奥初级组 获取标准输入数据大小</span></span>
<span class="line"><span style="color:#d8dee9ff;">函数·获取标准输入数据大小() =&gt; 整型</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span>
<span class="line"><span style="color:#d8dee9ff;">#凹:导入 信奥初级组 获取标准输入数据</span></span>
<span class="line"><span style="color:#d8dee9ff;">函数·获取标准输入数据(地址: 整型)</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>其中<code>#凹:导入</code>导入宿组函数的指令，<code>信奥初级组 获取标准输入数据大小</code>表示“信奥初级组”环境的“获取标准输入数据大小”函数。目前还没有“信奥初级组”环境，还只是在设计阶段。</p><p>有了以上2个函数就可以包装读取输入的函数：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">引入 &quot;洪荒&quot;</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span>
<span class="line"><span style="color:#d8dee9ff;">函数·读取输入 =&gt; []字节:</span></span>
<span class="line"><span style="color:#d8dee9ff;">    长 := 获取标准输入数据大小()</span></span>
<span class="line"><span style="color:#d8dee9ff;">    地 := 获取标准输入数据([]字节, 长)</span></span>
<span class="line"><span style="color:#d8dee9ff;">    获取标准输入数据(洪荒·原生(地))</span></span>
<span class="line"><span style="color:#d8dee9ff;">    返回 地</span></span>
<span class="line"><span style="color:#d8dee9ff;">完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_3-凹语言的解题思路" tabindex="-1">3. 凹语言的解题思路 <a class="header-anchor" href="#_3-凹语言的解题思路" aria-hidden="true">#</a></h2><p>刚设计完凹语言的标准输入读取函数，现在还没有真实的能执行的凹语言解题环境。我们先整理下解题的思路。</p><p>这道“拼数”问题的算法并不复杂，它依赖于计算机科学中基础的<strong>贪心策略</strong>。要使拼成的数最大，核心思想是最大化高位上的数值。因此，整个解题流程被拆解为两个关键步骤：<strong>数据筛选</strong>和<strong>降序排序</strong>。首先，我们通过遍历输入字符串，排除所有字母和数字 0，只保留 1~9 的有效数字，确保拼成的数位数最多。</p><p>以上是算法工程师的思维。如果是码农或者汤普森的思维，我们可以暴力求解：第一次找全部9的数字，然后是8、7、6一次下降；可以针对10个数字写10个函数，也可以包装为1个函数。当然，字符串很长的话会有点浪费视角。码农的改进思路是做一个10个数字的数组，一次遍历完成把0~9每个数字的个数统计下来。</p><p>凹语言版本代码如下：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">solve</span><span style="color:#D8DEE9FF;">(s: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	digits </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">make</span><span style="color:#D8DEE9FF;">([]</span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">10</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 统计数字的个数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> _, c </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">range</span><span style="color:#D8DEE9FF;"> s {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> c </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;0&#39;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;&amp;</span><span style="color:#D8DEE9FF;"> c </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;9&#39;</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			digits[c</span><span style="color:#81A1C1;">-</span><span style="color:#A3BE8C;">&#39;0&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 倒序输出</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">9</span><span style="color:#D8DEE9FF;">; i </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">; i</span><span style="color:#81A1C1;">--</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> k </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">; k </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;"> digits[i]; k</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#88C0D0;">print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;0&#39;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> i))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>中文版本如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">函数·解题(输入: 字串):</span></span>
<span class="line"><span style="color:#d8dee9ff;">	数字表 := 构建([]整型, 10)</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span>
<span class="line"><span style="color:#d8dee9ff;">	注: 统计数字的个数</span></span>
<span class="line"><span style="color:#d8dee9ff;">	循环 _, 某 := 迭代 输入:</span></span>
<span class="line"><span style="color:#d8dee9ff;">		如果 某 &gt;= &#39;0&#39; &amp;&amp; 某 &lt;= &#39;9&#39;:</span></span>
<span class="line"><span style="color:#d8dee9ff;">			数字表[某-&#39;0&#39;]++</span></span>
<span class="line"><span style="color:#d8dee9ff;">		完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;">	完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span>
<span class="line"><span style="color:#d8dee9ff;">	注: 倒序输出</span></span>
<span class="line"><span style="color:#d8dee9ff;">	循环 甲 := 9; 甲 &gt;= 0; 甲--:</span></span>
<span class="line"><span style="color:#d8dee9ff;">		循环 乙 := 0; 乙 &lt; 数字表[甲]; 乙++:</span></span>
<span class="line"><span style="color:#d8dee9ff;">			打印(字串(&#39;0&#39; + 甲))</span></span>
<span class="line"><span style="color:#d8dee9ff;">		完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;">	完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;">	输出()</span></span>
<span class="line"><span style="color:#d8dee9ff;">完毕</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_3-结语-算法之外的实战价值" tabindex="-1">3. 结语：算法之外的实战价值 <a class="header-anchor" href="#_3-结语-算法之外的实战价值" aria-hidden="true">#</a></h2><p>通过对 CSP-J “拼数”问题的解析与设计思路，我们不仅回顾了简单的贪心算法思想，更重要的是，我们找到了在实战中打通了凹语言支持此类竞赛的整个技术链路路径。在实际应用中，打通凹语言支持 CSP 等实战应用的 I/O 输入输出链路，其意义远大于算法本身的优化。 我们在这一过程中解决了本地文件读取等关键障碍。凹语言开发组的探索方向，正是希望让孩子们能够以母语思维进行编程创作，最大化地发挥他们的创造力。用最简单、最贴近中文习惯的语法去触达计算机科学的本质，这是母语编程的最终目标。</p>`,40),c=[t];function r(i,d,y,E,D,F){return a(),n("div",null,c)}const g=s(o,[["render",r]]);export{C as __pageData,g as default};
