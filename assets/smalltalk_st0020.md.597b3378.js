import{_ as s,c as a,o as e,a as n}from"./app.7586e3b1.js";const l="/st0020-01.png",w=JSON.parse('{"title":"凹语言 Docker + WebAssembly 3 分钟入门","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 凹语言到WASM模块","slug":"_1-凹语言到wasm模块","link":"#_1-凹语言到wasm模块","children":[]},{"level":2,"title":"2. 构建 wasm 模块","slug":"_2-构建-wasm-模块","link":"#_2-构建-wasm-模块","children":[]},{"level":2,"title":"3. 配置 Docker wasm 环境","slug":"_3-配置-docker-wasm-环境","link":"#_3-配置-docker-wasm-环境","children":[]},{"level":2,"title":"4. 构建 Docker wasm 镜像","slug":"_4-构建-docker-wasm-镜像","link":"#_4-构建-docker-wasm-镜像","children":[]},{"level":2,"title":"5. 执行 Docker wasm 镜像","slug":"_5-执行-docker-wasm-镜像","link":"#_5-执行-docker-wasm-镜像","children":[]},{"level":2,"title":"6. 总结展望","slug":"_6-总结展望","link":"#_6-总结展望","children":[]}],"relativePath":"smalltalk/st0020.md"}'),o={name:"smalltalk/st0020.md"},p=n('<h1 id="凹语言-docker-webassembly-3-分钟入门" tabindex="-1">凹语言 Docker + WebAssembly 3 分钟入门 <a class="header-anchor" href="#凹语言-docker-webassembly-3-分钟入门" aria-hidden="true">#</a></h1><ul><li>时间：2023-02-08</li><li>撰稿：凹语言开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0020.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0020.html</a></li></ul><hr><p>2022 年底，Docker 发布了对 WebAssembly 支持的预览版本，通过集成 WasmEdge 运行时支持WASM模块。Docker 运行时已经准备就绪，那么如何构建出 WASM 模块呢？目前支持 Wasm 的语言有很多，这里我们选择凹语言来构建 Wasm 镜像。Docker 官方博文：<a href="https://www.docker.com/blog/docker-wasm-technical-preview/" target="_blank" rel="noreferrer">https://www.docker.com/blog/docker-wasm-technical-preview/</a></p><p><img src="'+l+`" alt=""></p><p>本文的例子代码：<a href="https://gitee.com/wa-lang/wa/tree/dev-wasi/_examples/docker-wasm" target="_blank" rel="noreferrer">https://gitee.com/wa-lang/wa/tree/dev-wasi/_examples/docker-wasm</a></p><h2 id="_1-凹语言到wasm模块" tabindex="-1">1. 凹语言到WASM模块 <a class="header-anchor" href="#_1-凹语言到wasm模块" aria-hidden="true">#</a></h2><p>凹语言是针对 WebAssembly 设计的语言，也是国内第一个实现纯浏览器内编译、执行全链路的自研静态类型的编译型通用编程语言。这里我们再尝试通过凹语言来构造 Docker 的 Wasm 镜像。</p><p>凹语言是 Go 语言开发的编译器，因此需要本地先安装 Go1.17+ 版本环境。然后基于 dev-wasi 分支最新代码构造出 wa 语言编译器命令。或者通过以下命令安装：<code>go install wa-lang.org/wa@dev-wasi</code>，安装的命令默认在 <code>$HOME/go/bin</code> 目录。确保本地 <code>wa</code> 命令行可以使用，可以通过 <code>wa -v</code> 查看版本。</p><p>凹语言环境配置好之后，创建 hello.wa 文件:</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">//</span><span style="color:#D8DEE9FF;"> 版权 @</span><span style="color:#B48EAD;">2019</span><span style="color:#D8DEE9FF;"> 凹语言 作者。保留所有权利。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;runtime&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&quot;你好，凹语言！&quot;</span><span style="color:#D8DEE9FF;">, runtime.WAOS)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#88C0D0;">println</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">40</span><span style="color:#D8DEE9FF;">, </span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">	fmt.Println(</span><span style="color:#B48EAD;">1</span><span style="color:#81A1C1;">+</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(a: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">, b: </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">i32</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> a</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;">b</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后在命令行运行程序：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run hello.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">你好，凹语言！wasi</span></span>
<span class="line"><span style="color:#d8dee9ff;">42</span></span>
<span class="line"><span style="color:#d8dee9ff;">2</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>一切正常！</p><h2 id="_2-构建-wasm-模块" tabindex="-1">2. 构建 wasm 模块 <a class="header-anchor" href="#_2-构建-wasm-模块" aria-hidden="true">#</a></h2><p>通过 <code>wa build hello.wa</code> 命令生成 a.out.wasm 模块，大小约 3.6KB。然后通过 wasmer 执行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa build hello.wa</span></span>
<span class="line"><span style="color:#d8dee9ff;">$ wasmer a.out.wasm</span></span>
<span class="line"><span style="color:#d8dee9ff;">你好，凹语言！wasi</span></span>
<span class="line"><span style="color:#d8dee9ff;">42</span></span>
<span class="line"><span style="color:#d8dee9ff;">2</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>也可以通过 wabt 等辅助工具测试。输出结果说明一切正常。</p><h2 id="_3-配置-docker-wasm-环境" tabindex="-1">3. 配置 Docker wasm 环境 <a class="header-anchor" href="#_3-配置-docker-wasm-环境" aria-hidden="true">#</a></h2><p>完整的 Docker wasm 官方文档可以看这里：<a href="https://docs.docker.com/desktop/wasm/" target="_blank" rel="noreferrer">https://docs.docker.com/desktop/wasm/</a> 。按照好最新的 Docker 之后，按照 <a href="https://docs.docker.com/desktop/containerd/#enabling-the-containerd-image-store-feature" target="_blank" rel="noreferrer">https://docs.docker.com/desktop/containerd/#enabling-the-containerd-image-store-feature</a> 的提示（Settings页面的Experimental菜单），打开“Use containerd for pulling and storing images”特性。</p><h2 id="_4-构建-docker-wasm-镜像" tabindex="-1">4. 构建 Docker wasm 镜像 <a class="header-anchor" href="#_4-构建-docker-wasm-镜像" aria-hidden="true">#</a></h2><p>在当前目录创建 Dockerfile，内容如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">FROM scratch</span></span>
<span class="line"><span style="color:#d8dee9ff;">ADD a.out.wasm /hello.wasm</span></span>
<span class="line"><span style="color:#d8dee9ff;">ENTRYPOINT [&quot;hello.wasm&quot;]</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>执行以下命令创建 Docker wasm 镜像：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ docker buildx build --platform wasi/wasm32 -t wa-lang/hello-world .</span></span>
<span class="line"><span style="color:#d8dee9ff;">[+] Building 5.2s (8/8) FINISHED</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; [internal] load build definition from Dockerfile                   0.1s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; transferring dockerfile: 191B                                   0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; [internal] load .dockerignore                                      0.2s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; transferring context: 2B                                        0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; resolve image config for docker.io/docker/dockerfile:1             3.9s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; [auth] docker/dockerfile:pull token for registry-1.docker.io       0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; CACHED docker-image://docker.io/docker/dockerfile:1@sha256:d2...   0.2s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; resolve docker.io/docker/dockerfile:1@sha256:d2d74ff22a0e4...   0.2s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; [internal] load build context                                      0.1s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; transferring context: 3.71kB                                    0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; [1/1] ADD a.out.wasm /hello.wasm                                   0.1s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; exporting to image                                                 0.3s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; exporting layers                                                0.1s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; exporting manifest sha256:47686ab02b26ea0ed51261e17a32bc07...   0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; exporting config sha256:95cf2c26b4bcf8ae39c99060a0aa108198...   0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; naming to docker.io/wa-lang/hello-world:latest                  0.0s</span></span>
<span class="line"><span style="color:#d8dee9ff;"> =&gt; =&gt; unpacking to docker.io/wa-lang/hello-world:latest               0.1s</span></span>
<span class="line"><span style="color:#d8dee9ff;">$</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>需要注意的是这里使用的是 <code>buildx</code> 子命令，并且输出的是 <code>wasi/wasm32</code> 目标平台。完成后可以通过 <code>docker image list</code> 查看新生成的镜像。</p><h2 id="_5-执行-docker-wasm-镜像" tabindex="-1">5. 执行 Docker wasm 镜像 <a class="header-anchor" href="#_5-执行-docker-wasm-镜像" aria-hidden="true">#</a></h2><p>通过以下命令执行 Docker wasm 镜像：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ docker run --rm \\</span></span>
<span class="line"><span style="color:#d8dee9ff;">	--name=wasm-hello \\</span></span>
<span class="line"><span style="color:#d8dee9ff;">	--runtime=io.containerd.wasmedge.v1 \\</span></span>
<span class="line"><span style="color:#d8dee9ff;">	--platform=wasi/wasm32 \\</span></span>
<span class="line"><span style="color:#d8dee9ff;">	docker.io/wa-lang/hello-world:latest</span></span>
<span class="line"><span style="color:#d8dee9ff;">你好，凹语言！wasi</span></span>
<span class="line"><span style="color:#d8dee9ff;">42</span></span>
<span class="line"><span style="color:#d8dee9ff;">2</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>首先要选择 <code>io.containerd.wasmedge.v1</code> 运行时，同时也u有指定 <code>wasi/wasm32</code> 平台类型。如果一切顺利就可以看到输出结果了。</p><h2 id="_6-总结展望" tabindex="-1">6. 总结展望 <a class="header-anchor" href="#_6-总结展望" aria-hidden="true">#</a></h2><p>Docker 的创始人曾经说过，如果 Wasm 技术早点出现那么就不会有 Docker 这个技术。而目前 Docker 对 wasm 的支持也说明了其本身的应用场景。其实 Wasm 虽然诞生于 Web 领域，但是在 Web 之外也有相当广泛的应用场景。不过目前主流编程语言都不是原生为 Wasm 设计的，我们希望通过新的凹语言为 Wasm 提供更好的支持和体验。同时希望未来凹语言可以通过 Wasm 服务更多的场景。</p>`,32),c=[p];function t(r,d,i,f,y,m){return e(),a("div",null,c)}const k=s(o,[["render",t]]);export{w as __pageData,k as default};
