import{_ as s,a}from"./chunks/st0013-02.180850e2.js";import{_ as n,c as l,o as p,a as o}from"./app.7586e3b1.js";const t="/st0013-03.png",u=JSON.parse('{"title":"凹语言、图灵机和 BF 语言","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 图灵机是什么","slug":"_1-图灵机是什么","link":"#_1-图灵机是什么","children":[]},{"level":2,"title":"2. BF 语言是什么","slug":"_2-bf-语言是什么","link":"#_2-bf-语言是什么","children":[]},{"level":2,"title":"3. 凹语言构造 BF 虚拟机","slug":"_3-凹语言构造-bf-虚拟机","link":"#_3-凹语言构造-bf-虚拟机","children":[]},{"level":2,"title":"4. 浏览器环境运行","slug":"_4-浏览器环境运行","link":"#_4-浏览器环境运行","children":[]},{"level":2,"title":"5. 未来展望","slug":"_5-未来展望","link":"#_5-未来展望","children":[]}],"relativePath":"smalltalk/st0013.md"}'),e={name:"smalltalk/st0013.md"},c=o('<h1 id="凹语言、图灵机和-bf-语言" tabindex="-1">凹语言、图灵机和 BF 语言 <a class="header-anchor" href="#凹语言、图灵机和-bf-语言" aria-hidden="true">#</a></h1><ul><li>时间：2022-11-17</li><li>撰稿：凹语言 开发组</li><li>转载请注明原文链接：<a href="https://wa-lang.org/smalltalk/st0013.html" target="_blank" rel="noreferrer">https://wa-lang.org/smalltalk/st0013.html</a></li></ul><hr><p>凹语言是国内 Gopher 发起的纯社区构建的开源国产编程语言项目（没有公司背景、没有任何赞助）。同时凹语言也是国内第一个实现纯浏览器内编译、执行全链路的自研静态类型的编译型通用编程语言。本文尝试通过凹语言构建一个图灵完备的 BF 语言的虚拟机。</p><h2 id="_1-图灵机是什么" tabindex="-1">1. 图灵机是什么 <a class="header-anchor" href="#_1-图灵机是什么" aria-hidden="true">#</a></h2><p>图灵机是由图灵提出的一种抽象计算模型。机器有一条无限长的纸带，纸带分成了一个一个的小方格，每个方格有不同的颜色，这类似于计算机中的内存。同时机器有一个探头在纸带上移来移去，类似于通过内存地址来读写内存上的数据。机器头有一组内部计算状态，还有一些固定的程序（更像一个哈佛结构）。在每个时刻，机器头都要从当前纸带上读入一个方格信息，然后根据自己的内部状态和当前要执行的程序指令将信息输出到纸带方格上，同时更新自己的内部状态并进行移动。</p><p><img src="'+s+'" alt=""></p><h2 id="_2-bf-语言是什么" tabindex="-1">2. BF 语言是什么 <a class="header-anchor" href="#_2-bf-语言是什么" aria-hidden="true">#</a></h2><p>图灵机虽然不容易编程，但是非常容易理解。有一种极小化的 BrainFuck 计算机语言，它的工作模式和图灵机非常相似。BrainFuck 由 Urban Müller 在 1993 年创建的，简称为 BF 语言。Müller 最初的设计目标是建立一种简单的、可以用最小的编译器来实现的、符合图灵完备思想的编程语言。这种语言由八种状态构成，早期为 Amiga 机器编写的编译器（第二版）只有 240 个字节大小！</p><p><img src="'+a+`" alt=""></p><p>就象它的名字所暗示的，brainfuck 程序很难读懂。尽管如此，brainfuck 图灵机一样可以完成任何计算任务。虽然 brainfuck 的计算方式如此与众不同，但它确实能够正确运行。这种语言基于一个简单的机器模型，除了指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针（初始时指向数组的第一个字节）、以及用于输入输出的两个字节流。这是一种按照图灵完备的语言，它的主要设计思路是：用最小的概念实现一种 “简单” 的语言。BrainFuck 语言只有八种符号，所有的操作都由这八种符号的组合来完成。</p><p>下面是这八种状态的描述，其中每个状态由一个字符标识：</p><table><thead><tr><th>字符</th><th>C 语言类比</th><th>含义</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td><code>++ptr;</code></td><td>指针加一</td></tr><tr><td><code>&lt;</code></td><td><code>--ptr;</code></td><td>指针减一</td></tr><tr><td><code>+</code></td><td><code>++*ptr;</code></td><td>指针指向的字节的值加一</td></tr><tr><td><code>-</code></td><td><code>--*ptr;</code></td><td>指针指向的字节的值减一</td></tr><tr><td><code>.</code></td><td><code>putchar(*ptr);</code></td><td>输出指针指向的单元内容（ASCⅡ 码）</td></tr><tr><td><code>,</code></td><td><code>*ptr = getch();</code></td><td>输入内容到指针指向的单元（ASCⅡ 码）</td></tr><tr><td><code>[</code></td><td><code>while(*ptr) {}</code></td><td>如果指针指向的单元值为零，向后跳转到对应的 <code>]</code> 指令的次一指令处</td></tr><tr><td><code>]</code></td><td></td><td>如果指针指向的单元值不为零，向前跳转到对应的 <code>[</code> 指令的次一指令处</td></tr></tbody></table><p>下面是一个 brainfuck 程序，向标准输出打印 &quot;hi&quot; 字符串：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">++++++++++[&gt;++++++++++&lt;-]&gt;++++.+.</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><p>理论上我们可以将 BF 语言当作目标机器语言，将其它高级语言编译为 BF 语言后就可以在 BF 机器上运行了。</p><h2 id="_3-凹语言构造-bf-虚拟机" tabindex="-1">3. 凹语言构造 BF 虚拟机 <a class="header-anchor" href="#_3-凹语言构造-bf-虚拟机" aria-hidden="true">#</a></h2><p>首先构造一个虚拟机结构体：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">type</span><span style="color:#D8DEE9FF;"> BrainFuck </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	mem  :[</span><span style="color:#B48EAD;">30000</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">byte</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	code :</span><span style="color:#81A1C1;">string</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	pos  :</span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	pc   :</span><span style="color:#81A1C1;">int</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中 mem 表示虚拟机的 30000 个字节大小的内存，然后 code 表示输入的 BF 程序，pos 表示当前的输出位置，pc 则是指令的位置。</p><p>然后封装对应的构造函数和 Run 方法：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> NewBrainFuck(code: </span><span style="color:#81A1C1;">string</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">BrainFuck {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;">BrainFuck{code: code}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.Run() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#616E88;"># ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>下面是 main 函数构造 BF 虚拟机并执行的方式：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> main {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#616E88;"># print hi</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> code </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&quot;++++++++++[&gt;++++++++++&lt;-]&gt;++++.+.&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	vm </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> NewBrainFuck(code)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	vm.Run()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>下面让我们来看看 <code>BrainFuck.Run</code> 函数的实现：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.Run() {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> ; </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">len</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code); </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">switch</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc]; x {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;&gt;&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;&lt;&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;+&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;-&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;[&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos] </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">				</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;]&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos] </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">				</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;.&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#88C0D0;">print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">rune</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.mem[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pos]))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;,&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			</span><span style="color:#616E88;"># </span><span style="color:#81A1C1;">TODO:</span><span style="color:#616E88;"> support read byte</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">return</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>基本就是按照 BF 语言的指令逐个解释执行。其中输出是通过 print 内置函数打印，输入指令没有处理。</p><p>另外 <code>BrainFuck.loop</code> 私有方法则用于处理嵌套指令：</p><div class="language-wa"><button title="Copy Code" class="copy"></button><span class="lang">wa</span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#81A1C1;">func</span><span style="color:#D8DEE9FF;"> BrainFuck.</span><span style="color:#88C0D0;">loop</span><span style="color:#D8DEE9FF;">(inc: </span><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	</span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">:=</span><span style="color:#D8DEE9FF;"> inc; i </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">; </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> inc {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">switch</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.code[</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">.pc</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;">inc] {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;[&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			i</span><span style="color:#81A1C1;">++</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		</span><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> </span><span style="color:#A3BE8C;">&#39;]&#39;</span><span style="color:#D8DEE9FF;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">			i</span><span style="color:#81A1C1;">--</span></span>
<span class="line"><span style="color:#D8DEE9FF;">		}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">	}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span></code></pre></div><p>完整的程序可以参考 <a href="https://gitee.com/wa-lang/wa/blob/master/brainfuck.wa" target="_blank" rel="noreferrer">brainfuck.wa</a>。</p><p>需要克隆最新的凹语言仓库，然后在根目录执行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#d8dee9ff;">$ wa run brainfuck.wa </span></span>
<span class="line"><span style="color:#d8dee9ff;">hi</span></span>
<span class="line"><span style="color:#d8dee9ff;"></span></span></code></pre></div><h2 id="_4-浏览器环境运行" tabindex="-1">4. 浏览器环境运行 <a class="header-anchor" href="#_4-浏览器环境运行" aria-hidden="true">#</a></h2><p><a href="https://wa-lang.org/wa/brainfuck/" target="_blank" rel="noreferrer">https://wa-lang.org/wa/brainfuck/</a></p><p><img src="`+t+'" alt=""></p><h2 id="_5-未来展望" tabindex="-1">5. 未来展望 <a class="header-anchor" href="#_5-未来展望" aria-hidden="true">#</a></h2><p>虽然 BF 看似一个非常简单的语言，但是它却是一个图灵完备的编程语言。理论上任何高级语言编写的程序均可以由 BF 语言模拟出等价的程序。既然可以通过凹语言实行一个 BF 虚拟机那么凹语言必然也是图灵完备的，下一次希望通过凹语言构建更为复杂有趣的程序。</p>',37),r=[c];function F(E,D,y,i,d,C){return p(),l("div",null,r)}const f=n(e,[["render",F]]);export{u as __pageData,f as default};
